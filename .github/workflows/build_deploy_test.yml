#(C) Copyright [2020] Hewlett Packard Enterprise Development LP
#
#Licensed under the Apache License, Version 2.0 (the "License"); you may
#not use this file except in compliance with the License. You may obtain
#a copy of the License at
#
#    http:#www.apache.org/licenses/LICENSE-2.0
#
#Unless required by applicable law or agreed to in writing, software
#distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#License for the specific language governing permissions and limitations
# under the License.
name: build_deploy_test

on:
  pull_request:
    branches:
      - '**'

jobs:

  build:
    name: Deploy
    runs-on: ubuntu-18.04

    steps:
    - uses: actions/checkout@v2
    - name: Build the Docker image & Deploy
      run: |
        echo "Certificate Generation"
        ip=`hostname -I | awk '{print $1}'`
        echo $ip
        export FQDN=odimra.local.com
        export HOSTIP=$ip
        export ODIMRA_USER_ID=1234
        export ODIMRA_GROUP_ID=1234
        sudo echo "$HOSTIP $FQDN" | sudo tee -a /etc/hosts
        echo $FQDN
        echo $HOSTIP
        cd build/cert_generator; ./generate_odimra_cert.sh $FQDN; ./generate_kafka_certs.sh kafka; ./generate_zookeeper_certs.sh zookeeper
        ./copy_certificate.sh
        cd ../..
        export FQDN=${FQDN}
        export HOSTIP=${HOSTIP}
        make all
        sleep 15s
        b=`pgrep -f -c 'svc-api|svc-account-session|svc-aggregation|svc-events|svc-systems|svc-task|svc-fabrics|svc-telemetry|svc-managers|svc-update|plugin-redfish|urp|plugin-dell'`
        echo "Detected number of ODIM related processes: " $b
        if [ $b -eq 23 ];
        then
            echo "ODIMRA processes & GRF,Dell and urp plugin are up & running"
            echo "Deployment sucessful" 
        else
            echo "ODIMRA processes or GRF,Dell and urp plugin failed to come up. Check ODIMRA or PLUGIN logs"
            echo "Deployemnt Failed" 
            exit -1
        fi
              
    - name: Test
      run: |
        flag=0
        echo "Create Session using the URI /redfish/v1/Sessionservice/Sessions"
          run=$(curl --cacert /etc/odimracert/rootCA.crt -s -o /dev/null -w "%{http_code}" -X POST -H "Content-Type:application/json" -d '{"UserName": "admin","Password": "Od!m12$4"}' 'https://odimra.local.com:45000/redfish/v1/SessionService/Sessions')
        if [ $run -eq 201 ];
        then 
            echo "Session Created Sucessfully"
            echo "---------------------------"
        else
            echo "Session Creation Failed with status code $run"
            echo "---------------------------------------------"
            flag=1
        fi
        echo "User with ConfigureUser privilege creates a role having ConfigureSelf and Login privilege"
        run1=$(curl --user admin:Od\!m12\$4 --cacert /etc/odimracert/rootCA.crt -s -o /dev/null -w "%{http_code}" -X POST -H "Content-Type:application/json" -d '{"RoleId":"RoleSanity", "OemPrivileges":[], "AssignedPrivileges":["Login","ConfigureSelf"]}' 'https://odimra.local.com:45000/redfish/v1/AccountService/Roles')
        if [ $run1 -eq 201 ];
        then 
            echo "Role Created Sucessfully"
            echo "---------------------------"
        else
            echo "Role Creation Failed with status code $run1"
            echo "-------------------------------------------"
            flag=1
        fi
        echo "POST Admin creating account - (args - username, password, roleID)"
        run2=$(curl --user admin:Od\!m12\$4 --cacert /etc/odimracert/rootCA.crt -s -o /dev/null -w "%{http_code}" -X POST -H "Content-Type:application/json" -d '{"UserName":"SanityUser","Password":"San!ty123$45","RoleId":"RoleSanity"}' 'https://odimra.local.com:45000/redfish/v1/AccountService/Accounts')
        if [ $run2 -eq 201 ];
        then 
            echo "Account Created Sucessfully"
            echo "---------------------------"
        else
            echo "Account Creation Failed with status code $run2"
            echo "----------------------------------------------"
            flag=1
        fi
        
        if [ $flag -eq 1 ];
        then 
          echo "Sanity Tests Failed"
          exit 1
        else
          echo "ALL Sanity Tests Passed Sucessfully"
        fi

    - name: Prepare Build Artifacts
      run: |
        sudo mkdir /var/log/odim-infra
        docker-compose -f build/docker-compose.yml logs kafka | sudo tee /var/log/odim-infra/kafka.log
        docker-compose -f build/docker-compose.yml logs zookeeper| sudo tee /var/log/odim-infra/zookeeper.log
        docker-compose -f build/docker-compose.yml logs consul | sudo tee /var/log/odim-infra/consul.log
        docker-compose -f build/docker-compose.yml logs redis | sudo tee /var/log/odim-infra/redis.log
        sudo mkdir /var/log/odim-plugins
        docker-compose -f build/docker-compose.yml logs urp |sudo tee /var/log/odim-plugins/urp.log
        sudo cp /var/log/GRF_PLUGIN/plugin.log /var/log/odim-plugins/grf.log
        sudo cp /var/log/DELL_PLUGIN/dell_plugin.log /var/log/odim-plugins/dell.log
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v2
      if: always()
      with:
       name: my-artifiact
       path: |
        /var/log/odimra
        /var/log/DELL_PLUGIN
        /var/log/odim-plugins
        /var/log/odim-infra
  
