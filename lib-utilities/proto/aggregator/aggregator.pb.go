// Code generated by protoc-gen-go. DO NOT EDIT.
// source: aggregator.proto

package aggregator

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AggregatorRequest struct {
	SessionToken         string   `protobuf:"bytes,1,opt,name=SessionToken,json=sessionToken,proto3" json:"SessionToken,omitempty"`
	RequestBody          []byte   `protobuf:"bytes,2,opt,name=RequestBody,json=requestBody,proto3" json:"RequestBody,omitempty"`
	URL                  string   `protobuf:"bytes,3,opt,name=URL,json=uRL,proto3" json:"URL,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AggregatorRequest) Reset()         { *m = AggregatorRequest{} }
func (m *AggregatorRequest) String() string { return proto.CompactTextString(m) }
func (*AggregatorRequest) ProtoMessage()    {}
func (*AggregatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_60785b04c84bec7e, []int{0}
}

func (m *AggregatorRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AggregatorRequest.Unmarshal(m, b)
}
func (m *AggregatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AggregatorRequest.Marshal(b, m, deterministic)
}
func (m *AggregatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AggregatorRequest.Merge(m, src)
}
func (m *AggregatorRequest) XXX_Size() int {
	return xxx_messageInfo_AggregatorRequest.Size(m)
}
func (m *AggregatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AggregatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AggregatorRequest proto.InternalMessageInfo

func (m *AggregatorRequest) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

func (m *AggregatorRequest) GetRequestBody() []byte {
	if m != nil {
		return m.RequestBody
	}
	return nil
}

func (m *AggregatorRequest) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

type AggregatorResponse struct {
	StatusCode           int32             `protobuf:"varint,1,opt,name=statusCode,proto3" json:"statusCode,omitempty"`
	StatusMessage        string            `protobuf:"bytes,2,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
	Header               map[string]string `protobuf:"bytes,3,rep,name=header,proto3" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Body                 []byte            `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *AggregatorResponse) Reset()         { *m = AggregatorResponse{} }
func (m *AggregatorResponse) String() string { return proto.CompactTextString(m) }
func (*AggregatorResponse) ProtoMessage()    {}
func (*AggregatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_60785b04c84bec7e, []int{1}
}

func (m *AggregatorResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AggregatorResponse.Unmarshal(m, b)
}
func (m *AggregatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AggregatorResponse.Marshal(b, m, deterministic)
}
func (m *AggregatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AggregatorResponse.Merge(m, src)
}
func (m *AggregatorResponse) XXX_Size() int {
	return xxx_messageInfo_AggregatorResponse.Size(m)
}
func (m *AggregatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AggregatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AggregatorResponse proto.InternalMessageInfo

func (m *AggregatorResponse) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *AggregatorResponse) GetStatusMessage() string {
	if m != nil {
		return m.StatusMessage
	}
	return ""
}

func (m *AggregatorResponse) GetHeader() map[string]string {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *AggregatorResponse) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type RediscoverSystemInventoryRequest struct {
	SystemID             string   `protobuf:"bytes,1,opt,name=SystemID,json=systemID,proto3" json:"SystemID,omitempty"`
	SystemURL            string   `protobuf:"bytes,2,opt,name=SystemURL,json=systemURL,proto3" json:"SystemURL,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RediscoverSystemInventoryRequest) Reset()         { *m = RediscoverSystemInventoryRequest{} }
func (m *RediscoverSystemInventoryRequest) String() string { return proto.CompactTextString(m) }
func (*RediscoverSystemInventoryRequest) ProtoMessage()    {}
func (*RediscoverSystemInventoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_60785b04c84bec7e, []int{2}
}

func (m *RediscoverSystemInventoryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RediscoverSystemInventoryRequest.Unmarshal(m, b)
}
func (m *RediscoverSystemInventoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RediscoverSystemInventoryRequest.Marshal(b, m, deterministic)
}
func (m *RediscoverSystemInventoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RediscoverSystemInventoryRequest.Merge(m, src)
}
func (m *RediscoverSystemInventoryRequest) XXX_Size() int {
	return xxx_messageInfo_RediscoverSystemInventoryRequest.Size(m)
}
func (m *RediscoverSystemInventoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RediscoverSystemInventoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RediscoverSystemInventoryRequest proto.InternalMessageInfo

func (m *RediscoverSystemInventoryRequest) GetSystemID() string {
	if m != nil {
		return m.SystemID
	}
	return ""
}

func (m *RediscoverSystemInventoryRequest) GetSystemURL() string {
	if m != nil {
		return m.SystemURL
	}
	return ""
}

type RediscoverSystemInventoryResponse struct {
	TaskURL              string   `protobuf:"bytes,1,opt,name=TaskURL,json=taskURL,proto3" json:"TaskURL,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RediscoverSystemInventoryResponse) Reset()         { *m = RediscoverSystemInventoryResponse{} }
func (m *RediscoverSystemInventoryResponse) String() string { return proto.CompactTextString(m) }
func (*RediscoverSystemInventoryResponse) ProtoMessage()    {}
func (*RediscoverSystemInventoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_60785b04c84bec7e, []int{3}
}

func (m *RediscoverSystemInventoryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RediscoverSystemInventoryResponse.Unmarshal(m, b)
}
func (m *RediscoverSystemInventoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RediscoverSystemInventoryResponse.Marshal(b, m, deterministic)
}
func (m *RediscoverSystemInventoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RediscoverSystemInventoryResponse.Merge(m, src)
}
func (m *RediscoverSystemInventoryResponse) XXX_Size() int {
	return xxx_messageInfo_RediscoverSystemInventoryResponse.Size(m)
}
func (m *RediscoverSystemInventoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RediscoverSystemInventoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RediscoverSystemInventoryResponse proto.InternalMessageInfo

func (m *RediscoverSystemInventoryResponse) GetTaskURL() string {
	if m != nil {
		return m.TaskURL
	}
	return ""
}

type UpdateSystemStateRequest struct {
	SystemUUID           string   `protobuf:"bytes,1,opt,name=SystemUUID,json=systemUUID,proto3" json:"SystemUUID,omitempty"`
	SystemID             string   `protobuf:"bytes,2,opt,name=SystemID,json=systemID,proto3" json:"SystemID,omitempty"`
	SystemURI            string   `protobuf:"bytes,3,opt,name=SystemURI,json=systemURI,proto3" json:"SystemURI,omitempty"`
	UpdateKey            string   `protobuf:"bytes,4,opt,name=UpdateKey,json=updateKey,proto3" json:"UpdateKey,omitempty"`
	UpdateVal            string   `protobuf:"bytes,5,opt,name=UpdateVal,json=updateVal,proto3" json:"UpdateVal,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateSystemStateRequest) Reset()         { *m = UpdateSystemStateRequest{} }
func (m *UpdateSystemStateRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateSystemStateRequest) ProtoMessage()    {}
func (*UpdateSystemStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_60785b04c84bec7e, []int{4}
}

func (m *UpdateSystemStateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateSystemStateRequest.Unmarshal(m, b)
}
func (m *UpdateSystemStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateSystemStateRequest.Marshal(b, m, deterministic)
}
func (m *UpdateSystemStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSystemStateRequest.Merge(m, src)
}
func (m *UpdateSystemStateRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateSystemStateRequest.Size(m)
}
func (m *UpdateSystemStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSystemStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSystemStateRequest proto.InternalMessageInfo

func (m *UpdateSystemStateRequest) GetSystemUUID() string {
	if m != nil {
		return m.SystemUUID
	}
	return ""
}

func (m *UpdateSystemStateRequest) GetSystemID() string {
	if m != nil {
		return m.SystemID
	}
	return ""
}

func (m *UpdateSystemStateRequest) GetSystemURI() string {
	if m != nil {
		return m.SystemURI
	}
	return ""
}

func (m *UpdateSystemStateRequest) GetUpdateKey() string {
	if m != nil {
		return m.UpdateKey
	}
	return ""
}

func (m *UpdateSystemStateRequest) GetUpdateVal() string {
	if m != nil {
		return m.UpdateVal
	}
	return ""
}

type UpdateSystemStateResponse struct {
	TaskURL              string   `protobuf:"bytes,1,opt,name=TaskURL,json=taskURL,proto3" json:"TaskURL,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateSystemStateResponse) Reset()         { *m = UpdateSystemStateResponse{} }
func (m *UpdateSystemStateResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateSystemStateResponse) ProtoMessage()    {}
func (*UpdateSystemStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_60785b04c84bec7e, []int{5}
}

func (m *UpdateSystemStateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateSystemStateResponse.Unmarshal(m, b)
}
func (m *UpdateSystemStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateSystemStateResponse.Marshal(b, m, deterministic)
}
func (m *UpdateSystemStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateSystemStateResponse.Merge(m, src)
}
func (m *UpdateSystemStateResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateSystemStateResponse.Size(m)
}
func (m *UpdateSystemStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateSystemStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateSystemStateResponse proto.InternalMessageInfo

func (m *UpdateSystemStateResponse) GetTaskURL() string {
	if m != nil {
		return m.TaskURL
	}
	return ""
}

func init() {
	proto.RegisterType((*AggregatorRequest)(nil), "AggregatorRequest")
	proto.RegisterType((*AggregatorResponse)(nil), "AggregatorResponse")
	proto.RegisterMapType((map[string]string)(nil), "AggregatorResponse.HeaderEntry")
	proto.RegisterType((*RediscoverSystemInventoryRequest)(nil), "RediscoverSystemInventoryRequest")
	proto.RegisterType((*RediscoverSystemInventoryResponse)(nil), "RediscoverSystemInventoryResponse")
	proto.RegisterType((*UpdateSystemStateRequest)(nil), "UpdateSystemStateRequest")
	proto.RegisterType((*UpdateSystemStateResponse)(nil), "UpdateSystemStateResponse")
}

func init() { proto.RegisterFile("aggregator.proto", fileDescriptor_60785b04c84bec7e) }

var fileDescriptor_60785b04c84bec7e = []byte{
	// 632 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x4f, 0x4f, 0xdb, 0x4e,
	0x10, 0xc5, 0x84, 0x00, 0x9e, 0xe4, 0xa7, 0x1f, 0x2c, 0xb4, 0x35, 0x6e, 0x45, 0x83, 0x55, 0x55,
	0x9c, 0x7c, 0xa0, 0xaa, 0x5a, 0xaa, 0x22, 0x35, 0x24, 0x14, 0x50, 0x41, 0x48, 0x6b, 0xc2, 0xa9,
	0x97, 0x25, 0x1e, 0x42, 0x14, 0xc7, 0x9b, 0xee, 0xae, 0x23, 0xe5, 0x5b, 0xf5, 0x33, 0xf5, 0x6b,
	0xf4, 0x52, 0xf9, 0x5f, 0xe2, 0x90, 0xa4, 0xa9, 0x93, 0x9b, 0xf7, 0xcd, 0xce, 0x9b, 0x37, 0x6f,
	0x26, 0xab, 0xc0, 0x16, 0x6b, 0xb5, 0x04, 0xb6, 0x98, 0xe2, 0xc2, 0xee, 0x09, 0xae, 0xb8, 0xd5,
	0x81, 0xed, 0xea, 0x10, 0xa3, 0xf8, 0x23, 0x40, 0xa9, 0x88, 0x05, 0x65, 0x07, 0xa5, 0x6c, 0x73,
	0xff, 0x96, 0x77, 0xd0, 0x37, 0xb4, 0x8a, 0x76, 0xa8, 0xd3, 0xb2, 0xcc, 0x60, 0xa4, 0x02, 0xa5,
	0xe4, 0xfa, 0x29, 0x77, 0x07, 0xc6, 0x6a, 0x45, 0x3b, 0x2c, 0xd3, 0x92, 0x18, 0x41, 0x64, 0x0b,
	0x0a, 0x0d, 0x7a, 0x65, 0x14, 0xa2, 0xe4, 0x42, 0x40, 0xaf, 0xac, 0x5f, 0x1a, 0x90, 0x6c, 0x35,
	0xd9, 0xe3, 0xbe, 0x44, 0xb2, 0x0f, 0x20, 0x15, 0x53, 0x81, 0xac, 0x71, 0x17, 0xa3, 0x62, 0x45,
	0x9a, 0x41, 0xc8, 0x1b, 0xf8, 0x2f, 0x3e, 0x5d, 0xa3, 0x94, 0xac, 0x85, 0x51, 0x31, 0x9d, 0x8e,
	0x83, 0xe4, 0x03, 0xac, 0x3f, 0x22, 0x73, 0x51, 0x18, 0x85, 0x4a, 0xe1, 0xb0, 0x74, 0xf4, 0xda,
	0x9e, 0x2c, 0x65, 0x5f, 0x44, 0x37, 0xce, 0x7c, 0x25, 0x06, 0x34, 0xb9, 0x4e, 0x08, 0xac, 0xdd,
	0x87, 0x2d, 0xac, 0x45, 0x2d, 0x44, 0xdf, 0xe6, 0x31, 0x94, 0x32, 0x57, 0xc3, 0x56, 0x3a, 0x38,
	0x48, 0x7c, 0x08, 0x3f, 0xc9, 0x2e, 0x14, 0xfb, 0xcc, 0x0b, 0x52, 0x2d, 0xf1, 0xe1, 0xd3, 0xea,
	0x47, 0xcd, 0xfa, 0x0e, 0x15, 0x8a, 0x6e, 0x5b, 0x36, 0x79, 0x1f, 0x85, 0x33, 0x90, 0x0a, 0xbb,
	0x97, 0x7e, 0x1f, 0x7d, 0xc5, 0xc5, 0x20, 0x35, 0xd8, 0x84, 0xcd, 0x24, 0x52, 0x4f, 0x48, 0x37,
	0x65, 0x72, 0x26, 0xaf, 0x40, 0x8f, 0x63, 0xa1, 0x79, 0x31, 0xbb, 0x2e, 0x53, 0xc0, 0x3a, 0x81,
	0x83, 0xbf, 0xb0, 0x27, 0x86, 0x1a, 0xb0, 0x71, 0xcb, 0x64, 0x27, 0x24, 0x88, 0xd9, 0x37, 0x54,
	0x7c, 0xb4, 0x7e, 0x6a, 0x60, 0x34, 0x7a, 0x2e, 0x53, 0x18, 0xe7, 0x3a, 0x8a, 0x29, 0x4c, 0x55,
	0xed, 0x03, 0x24, 0x95, 0x1b, 0x43, 0x5d, 0x20, 0x87, 0xc8, 0x98, 0xea, 0xd5, 0xd9, 0xaa, 0x2f,
	0x93, 0x91, 0x0f, 0x55, 0x5f, 0x86, 0xd1, 0xb8, 0xea, 0x37, 0x8c, 0x7d, 0xd6, 0xa9, 0x1e, 0xa4,
	0xc0, 0x28, 0x7a, 0xc7, 0x3c, 0xa3, 0x98, 0x8d, 0xde, 0x31, 0xcf, 0x7a, 0x0f, 0x7b, 0x53, 0x14,
	0xcf, 0xeb, 0xf4, 0xe8, 0x37, 0x00, 0x8c, 0x16, 0x80, 0x9c, 0xc2, 0xb3, 0x73, 0x54, 0x29, 0xd0,
	0xe6, 0xbe, 0x83, 0xa2, 0xdf, 0x6e, 0x22, 0x21, 0xf6, 0xc4, 0xfe, 0x9b, 0x3b, 0x53, 0x56, 0xc7,
	0x5a, 0x21, 0x47, 0x50, 0xa4, 0x28, 0x51, 0xe5, 0xc9, 0xf9, 0x02, 0x3b, 0x0e, 0xaa, 0x3a, 0x3e,
	0xb0, 0xc0, 0x53, 0xa7, 0x9c, 0xab, 0x1b, 0x11, 0xed, 0xdc, 0xbf, 0x33, 0xb8, 0xb0, 0x37, 0x73,
	0xe2, 0xe4, 0xc0, 0x9e, 0xb7, 0x6b, 0xa6, 0x65, 0xcf, 0x5d, 0x18, 0x6b, 0x85, 0x5c, 0xc1, 0xf6,
	0x84, 0xcb, 0x64, 0xcf, 0x9e, 0xb5, 0x2b, 0xa6, 0x69, 0xcf, 0x1c, 0x8a, 0xb5, 0x42, 0xaa, 0xb0,
	0x5b, 0x75, 0xdd, 0xac, 0xdb, 0x3c, 0x10, 0xf9, 0xcc, 0xae, 0xc3, 0x8b, 0x70, 0x60, 0x9e, 0xb7,
	0x14, 0x4b, 0x15, 0x76, 0x9f, 0x8c, 0x7d, 0x11, 0x21, 0x71, 0xab, 0xcb, 0xb2, 0xd4, 0xd1, 0xc3,
	0x25, 0x59, 0x3e, 0xc3, 0xff, 0x35, 0x81, 0x19, 0x2d, 0xb9, 0xb2, 0x4f, 0x60, 0x6b, 0xdc, 0x52,
	0x94, 0x79, 0xd2, 0x8f, 0xa1, 0x9c, 0xf1, 0x32, 0xaf, 0xee, 0xf1, 0xee, 0x73, 0x65, 0xd7, 0xe0,
	0x79, 0xd5, 0x75, 0xcf, 0x3c, 0xec, 0xa2, 0xaf, 0xe4, 0x2d, 0x5f, 0x88, 0xe4, 0x02, 0x5e, 0x52,
	0xec, 0xf2, 0x3e, 0xa6, 0x3c, 0x5f, 0x05, 0xef, 0x2e, 0xc4, 0x74, 0x06, 0x46, 0xf4, 0x0c, 0xa4,
	0x44, 0x37, 0x0f, 0x0b, 0xd1, 0x38, 0xf0, 0x76, 0xca, 0xcb, 0xb0, 0x24, 0xe9, 0xf0, 0x57, 0x53,
	0xe3, 0xbe, 0x8f, 0xcd, 0x70, 0xcb, 0xae, 0x51, 0x3d, 0x72, 0x57, 0xe6, 0x7c, 0xb4, 0xce, 0x51,
	0x3d, 0xa5, 0xc8, 0xc1, 0x70, 0xbf, 0x1e, 0xfd, 0xbb, 0x78, 0xf7, 0x27, 0x00, 0x00, 0xff, 0xff,
	0x02, 0xba, 0x94, 0x7f, 0x71, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AggregatorClient is the client API for Aggregator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AggregatorClient interface {
	GetAggregationService(ctx context.Context, in *AggregatorRequest, opts ...grpc.CallOption) (*AggregatorResponse, error)
	Reset(ctx context.Context, in *AggregatorRequest, opts ...grpc.CallOption) (*AggregatorResponse, error)
	SetDefaultBootOrder(ctx context.Context, in *AggregatorRequest, opts ...grpc.CallOption) (*AggregatorResponse, error)
	RediscoverSystemInventory(ctx context.Context, in *RediscoverSystemInventoryRequest, opts ...grpc.CallOption) (*RediscoverSystemInventoryResponse, error)
	UpdateSystemState(ctx context.Context, in *UpdateSystemStateRequest, opts ...grpc.CallOption) (*UpdateSystemStateResponse, error)
	AddAggregationSource(ctx context.Context, in *AggregatorRequest, opts ...grpc.CallOption) (*AggregatorResponse, error)
	GetAllAggregationSource(ctx context.Context, in *AggregatorRequest, opts ...grpc.CallOption) (*AggregatorResponse, error)
	GetAggregationSource(ctx context.Context, in *AggregatorRequest, opts ...grpc.CallOption) (*AggregatorResponse, error)
	UpdateAggregationSource(ctx context.Context, in *AggregatorRequest, opts ...grpc.CallOption) (*AggregatorResponse, error)
	DeleteAggregationSource(ctx context.Context, in *AggregatorRequest, opts ...grpc.CallOption) (*AggregatorResponse, error)
	CreateAggregate(ctx context.Context, in *AggregatorRequest, opts ...grpc.CallOption) (*AggregatorResponse, error)
	GetAllAggregates(ctx context.Context, in *AggregatorRequest, opts ...grpc.CallOption) (*AggregatorResponse, error)
	GetAggregate(ctx context.Context, in *AggregatorRequest, opts ...grpc.CallOption) (*AggregatorResponse, error)
	DeleteAggregate(ctx context.Context, in *AggregatorRequest, opts ...grpc.CallOption) (*AggregatorResponse, error)
	AddElementsToAggregate(ctx context.Context, in *AggregatorRequest, opts ...grpc.CallOption) (*AggregatorResponse, error)
	RemoveElementsFromAggregate(ctx context.Context, in *AggregatorRequest, opts ...grpc.CallOption) (*AggregatorResponse, error)
	ResetElementsOfAggregate(ctx context.Context, in *AggregatorRequest, opts ...grpc.CallOption) (*AggregatorResponse, error)
	SetDefaultBootOrderElementsOfAggregate(ctx context.Context, in *AggregatorRequest, opts ...grpc.CallOption) (*AggregatorResponse, error)
	GetAllConnectionMethods(ctx context.Context, in *AggregatorRequest, opts ...grpc.CallOption) (*AggregatorResponse, error)
	GetConnectionMethod(ctx context.Context, in *AggregatorRequest, opts ...grpc.CallOption) (*AggregatorResponse, error)
}

type aggregatorClient struct {
	cc *grpc.ClientConn
}

func NewAggregatorClient(cc *grpc.ClientConn) AggregatorClient {
	return &aggregatorClient{cc}
}

func (c *aggregatorClient) GetAggregationService(ctx context.Context, in *AggregatorRequest, opts ...grpc.CallOption) (*AggregatorResponse, error) {
	out := new(AggregatorResponse)
	err := c.cc.Invoke(ctx, "/Aggregator/GetAggregationService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorClient) Reset(ctx context.Context, in *AggregatorRequest, opts ...grpc.CallOption) (*AggregatorResponse, error) {
	out := new(AggregatorResponse)
	err := c.cc.Invoke(ctx, "/Aggregator/Reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorClient) SetDefaultBootOrder(ctx context.Context, in *AggregatorRequest, opts ...grpc.CallOption) (*AggregatorResponse, error) {
	out := new(AggregatorResponse)
	err := c.cc.Invoke(ctx, "/Aggregator/SetDefaultBootOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorClient) RediscoverSystemInventory(ctx context.Context, in *RediscoverSystemInventoryRequest, opts ...grpc.CallOption) (*RediscoverSystemInventoryResponse, error) {
	out := new(RediscoverSystemInventoryResponse)
	err := c.cc.Invoke(ctx, "/Aggregator/RediscoverSystemInventory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorClient) UpdateSystemState(ctx context.Context, in *UpdateSystemStateRequest, opts ...grpc.CallOption) (*UpdateSystemStateResponse, error) {
	out := new(UpdateSystemStateResponse)
	err := c.cc.Invoke(ctx, "/Aggregator/UpdateSystemState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorClient) AddAggregationSource(ctx context.Context, in *AggregatorRequest, opts ...grpc.CallOption) (*AggregatorResponse, error) {
	out := new(AggregatorResponse)
	err := c.cc.Invoke(ctx, "/Aggregator/AddAggregationSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorClient) GetAllAggregationSource(ctx context.Context, in *AggregatorRequest, opts ...grpc.CallOption) (*AggregatorResponse, error) {
	out := new(AggregatorResponse)
	err := c.cc.Invoke(ctx, "/Aggregator/GetAllAggregationSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorClient) GetAggregationSource(ctx context.Context, in *AggregatorRequest, opts ...grpc.CallOption) (*AggregatorResponse, error) {
	out := new(AggregatorResponse)
	err := c.cc.Invoke(ctx, "/Aggregator/GetAggregationSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorClient) UpdateAggregationSource(ctx context.Context, in *AggregatorRequest, opts ...grpc.CallOption) (*AggregatorResponse, error) {
	out := new(AggregatorResponse)
	err := c.cc.Invoke(ctx, "/Aggregator/UpdateAggregationSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorClient) DeleteAggregationSource(ctx context.Context, in *AggregatorRequest, opts ...grpc.CallOption) (*AggregatorResponse, error) {
	out := new(AggregatorResponse)
	err := c.cc.Invoke(ctx, "/Aggregator/DeleteAggregationSource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorClient) CreateAggregate(ctx context.Context, in *AggregatorRequest, opts ...grpc.CallOption) (*AggregatorResponse, error) {
	out := new(AggregatorResponse)
	err := c.cc.Invoke(ctx, "/Aggregator/CreateAggregate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorClient) GetAllAggregates(ctx context.Context, in *AggregatorRequest, opts ...grpc.CallOption) (*AggregatorResponse, error) {
	out := new(AggregatorResponse)
	err := c.cc.Invoke(ctx, "/Aggregator/GetAllAggregates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorClient) GetAggregate(ctx context.Context, in *AggregatorRequest, opts ...grpc.CallOption) (*AggregatorResponse, error) {
	out := new(AggregatorResponse)
	err := c.cc.Invoke(ctx, "/Aggregator/GetAggregate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorClient) DeleteAggregate(ctx context.Context, in *AggregatorRequest, opts ...grpc.CallOption) (*AggregatorResponse, error) {
	out := new(AggregatorResponse)
	err := c.cc.Invoke(ctx, "/Aggregator/DeleteAggregate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorClient) AddElementsToAggregate(ctx context.Context, in *AggregatorRequest, opts ...grpc.CallOption) (*AggregatorResponse, error) {
	out := new(AggregatorResponse)
	err := c.cc.Invoke(ctx, "/Aggregator/AddElementsToAggregate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorClient) RemoveElementsFromAggregate(ctx context.Context, in *AggregatorRequest, opts ...grpc.CallOption) (*AggregatorResponse, error) {
	out := new(AggregatorResponse)
	err := c.cc.Invoke(ctx, "/Aggregator/RemoveElementsFromAggregate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorClient) ResetElementsOfAggregate(ctx context.Context, in *AggregatorRequest, opts ...grpc.CallOption) (*AggregatorResponse, error) {
	out := new(AggregatorResponse)
	err := c.cc.Invoke(ctx, "/Aggregator/ResetElementsOfAggregate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorClient) SetDefaultBootOrderElementsOfAggregate(ctx context.Context, in *AggregatorRequest, opts ...grpc.CallOption) (*AggregatorResponse, error) {
	out := new(AggregatorResponse)
	err := c.cc.Invoke(ctx, "/Aggregator/SetDefaultBootOrderElementsOfAggregate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorClient) GetAllConnectionMethods(ctx context.Context, in *AggregatorRequest, opts ...grpc.CallOption) (*AggregatorResponse, error) {
	out := new(AggregatorResponse)
	err := c.cc.Invoke(ctx, "/Aggregator/GetAllConnectionMethods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorClient) GetConnectionMethod(ctx context.Context, in *AggregatorRequest, opts ...grpc.CallOption) (*AggregatorResponse, error) {
	out := new(AggregatorResponse)
	err := c.cc.Invoke(ctx, "/Aggregator/GetConnectionMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AggregatorServer is the server API for Aggregator service.
type AggregatorServer interface {
	GetAggregationService(context.Context, *AggregatorRequest) (*AggregatorResponse, error)
	Reset(context.Context, *AggregatorRequest) (*AggregatorResponse, error)
	SetDefaultBootOrder(context.Context, *AggregatorRequest) (*AggregatorResponse, error)
	RediscoverSystemInventory(context.Context, *RediscoverSystemInventoryRequest) (*RediscoverSystemInventoryResponse, error)
	UpdateSystemState(context.Context, *UpdateSystemStateRequest) (*UpdateSystemStateResponse, error)
	AddAggregationSource(context.Context, *AggregatorRequest) (*AggregatorResponse, error)
	GetAllAggregationSource(context.Context, *AggregatorRequest) (*AggregatorResponse, error)
	GetAggregationSource(context.Context, *AggregatorRequest) (*AggregatorResponse, error)
	UpdateAggregationSource(context.Context, *AggregatorRequest) (*AggregatorResponse, error)
	DeleteAggregationSource(context.Context, *AggregatorRequest) (*AggregatorResponse, error)
	CreateAggregate(context.Context, *AggregatorRequest) (*AggregatorResponse, error)
	GetAllAggregates(context.Context, *AggregatorRequest) (*AggregatorResponse, error)
	GetAggregate(context.Context, *AggregatorRequest) (*AggregatorResponse, error)
	DeleteAggregate(context.Context, *AggregatorRequest) (*AggregatorResponse, error)
	AddElementsToAggregate(context.Context, *AggregatorRequest) (*AggregatorResponse, error)
	RemoveElementsFromAggregate(context.Context, *AggregatorRequest) (*AggregatorResponse, error)
	ResetElementsOfAggregate(context.Context, *AggregatorRequest) (*AggregatorResponse, error)
	SetDefaultBootOrderElementsOfAggregate(context.Context, *AggregatorRequest) (*AggregatorResponse, error)
	GetAllConnectionMethods(context.Context, *AggregatorRequest) (*AggregatorResponse, error)
	GetConnectionMethod(context.Context, *AggregatorRequest) (*AggregatorResponse, error)
}

// UnimplementedAggregatorServer can be embedded to have forward compatible implementations.
type UnimplementedAggregatorServer struct {
}

func (*UnimplementedAggregatorServer) GetAggregationService(ctx context.Context, req *AggregatorRequest) (*AggregatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAggregationService not implemented")
}
func (*UnimplementedAggregatorServer) Reset(ctx context.Context, req *AggregatorRequest) (*AggregatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (*UnimplementedAggregatorServer) SetDefaultBootOrder(ctx context.Context, req *AggregatorRequest) (*AggregatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultBootOrder not implemented")
}
func (*UnimplementedAggregatorServer) RediscoverSystemInventory(ctx context.Context, req *RediscoverSystemInventoryRequest) (*RediscoverSystemInventoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RediscoverSystemInventory not implemented")
}
func (*UnimplementedAggregatorServer) UpdateSystemState(ctx context.Context, req *UpdateSystemStateRequest) (*UpdateSystemStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSystemState not implemented")
}
func (*UnimplementedAggregatorServer) AddAggregationSource(ctx context.Context, req *AggregatorRequest) (*AggregatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAggregationSource not implemented")
}
func (*UnimplementedAggregatorServer) GetAllAggregationSource(ctx context.Context, req *AggregatorRequest) (*AggregatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAggregationSource not implemented")
}
func (*UnimplementedAggregatorServer) GetAggregationSource(ctx context.Context, req *AggregatorRequest) (*AggregatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAggregationSource not implemented")
}
func (*UnimplementedAggregatorServer) UpdateAggregationSource(ctx context.Context, req *AggregatorRequest) (*AggregatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAggregationSource not implemented")
}
func (*UnimplementedAggregatorServer) DeleteAggregationSource(ctx context.Context, req *AggregatorRequest) (*AggregatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAggregationSource not implemented")
}
func (*UnimplementedAggregatorServer) CreateAggregate(ctx context.Context, req *AggregatorRequest) (*AggregatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAggregate not implemented")
}
func (*UnimplementedAggregatorServer) GetAllAggregates(ctx context.Context, req *AggregatorRequest) (*AggregatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAggregates not implemented")
}
func (*UnimplementedAggregatorServer) GetAggregate(ctx context.Context, req *AggregatorRequest) (*AggregatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAggregate not implemented")
}
func (*UnimplementedAggregatorServer) DeleteAggregate(ctx context.Context, req *AggregatorRequest) (*AggregatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAggregate not implemented")
}
func (*UnimplementedAggregatorServer) AddElementsToAggregate(ctx context.Context, req *AggregatorRequest) (*AggregatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddElementsToAggregate not implemented")
}
func (*UnimplementedAggregatorServer) RemoveElementsFromAggregate(ctx context.Context, req *AggregatorRequest) (*AggregatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveElementsFromAggregate not implemented")
}
func (*UnimplementedAggregatorServer) ResetElementsOfAggregate(ctx context.Context, req *AggregatorRequest) (*AggregatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetElementsOfAggregate not implemented")
}
func (*UnimplementedAggregatorServer) SetDefaultBootOrderElementsOfAggregate(ctx context.Context, req *AggregatorRequest) (*AggregatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultBootOrderElementsOfAggregate not implemented")
}
func (*UnimplementedAggregatorServer) GetAllConnectionMethods(ctx context.Context, req *AggregatorRequest) (*AggregatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllConnectionMethods not implemented")
}
func (*UnimplementedAggregatorServer) GetConnectionMethod(ctx context.Context, req *AggregatorRequest) (*AggregatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectionMethod not implemented")
}

func RegisterAggregatorServer(s *grpc.Server, srv AggregatorServer) {
	s.RegisterService(&_Aggregator_serviceDesc, srv)
}

func _Aggregator_GetAggregationService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).GetAggregationService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aggregator/GetAggregationService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).GetAggregationService(ctx, req.(*AggregatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aggregator_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aggregator/Reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).Reset(ctx, req.(*AggregatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aggregator_SetDefaultBootOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).SetDefaultBootOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aggregator/SetDefaultBootOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).SetDefaultBootOrder(ctx, req.(*AggregatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aggregator_RediscoverSystemInventory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RediscoverSystemInventoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).RediscoverSystemInventory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aggregator/RediscoverSystemInventory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).RediscoverSystemInventory(ctx, req.(*RediscoverSystemInventoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aggregator_UpdateSystemState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSystemStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).UpdateSystemState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aggregator/UpdateSystemState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).UpdateSystemState(ctx, req.(*UpdateSystemStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aggregator_AddAggregationSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).AddAggregationSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aggregator/AddAggregationSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).AddAggregationSource(ctx, req.(*AggregatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aggregator_GetAllAggregationSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).GetAllAggregationSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aggregator/GetAllAggregationSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).GetAllAggregationSource(ctx, req.(*AggregatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aggregator_GetAggregationSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).GetAggregationSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aggregator/GetAggregationSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).GetAggregationSource(ctx, req.(*AggregatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aggregator_UpdateAggregationSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).UpdateAggregationSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aggregator/UpdateAggregationSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).UpdateAggregationSource(ctx, req.(*AggregatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aggregator_DeleteAggregationSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).DeleteAggregationSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aggregator/DeleteAggregationSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).DeleteAggregationSource(ctx, req.(*AggregatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aggregator_CreateAggregate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).CreateAggregate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aggregator/CreateAggregate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).CreateAggregate(ctx, req.(*AggregatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aggregator_GetAllAggregates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).GetAllAggregates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aggregator/GetAllAggregates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).GetAllAggregates(ctx, req.(*AggregatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aggregator_GetAggregate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).GetAggregate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aggregator/GetAggregate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).GetAggregate(ctx, req.(*AggregatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aggregator_DeleteAggregate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).DeleteAggregate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aggregator/DeleteAggregate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).DeleteAggregate(ctx, req.(*AggregatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aggregator_AddElementsToAggregate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).AddElementsToAggregate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aggregator/AddElementsToAggregate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).AddElementsToAggregate(ctx, req.(*AggregatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aggregator_RemoveElementsFromAggregate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).RemoveElementsFromAggregate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aggregator/RemoveElementsFromAggregate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).RemoveElementsFromAggregate(ctx, req.(*AggregatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aggregator_ResetElementsOfAggregate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).ResetElementsOfAggregate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aggregator/ResetElementsOfAggregate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).ResetElementsOfAggregate(ctx, req.(*AggregatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aggregator_SetDefaultBootOrderElementsOfAggregate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).SetDefaultBootOrderElementsOfAggregate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aggregator/SetDefaultBootOrderElementsOfAggregate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).SetDefaultBootOrderElementsOfAggregate(ctx, req.(*AggregatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aggregator_GetAllConnectionMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).GetAllConnectionMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aggregator/GetAllConnectionMethods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).GetAllConnectionMethods(ctx, req.(*AggregatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aggregator_GetConnectionMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).GetConnectionMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aggregator/GetConnectionMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).GetConnectionMethod(ctx, req.(*AggregatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Aggregator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Aggregator",
	HandlerType: (*AggregatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAggregationService",
			Handler:    _Aggregator_GetAggregationService_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _Aggregator_Reset_Handler,
		},
		{
			MethodName: "SetDefaultBootOrder",
			Handler:    _Aggregator_SetDefaultBootOrder_Handler,
		},
		{
			MethodName: "RediscoverSystemInventory",
			Handler:    _Aggregator_RediscoverSystemInventory_Handler,
		},
		{
			MethodName: "UpdateSystemState",
			Handler:    _Aggregator_UpdateSystemState_Handler,
		},
		{
			MethodName: "AddAggregationSource",
			Handler:    _Aggregator_AddAggregationSource_Handler,
		},
		{
			MethodName: "GetAllAggregationSource",
			Handler:    _Aggregator_GetAllAggregationSource_Handler,
		},
		{
			MethodName: "GetAggregationSource",
			Handler:    _Aggregator_GetAggregationSource_Handler,
		},
		{
			MethodName: "UpdateAggregationSource",
			Handler:    _Aggregator_UpdateAggregationSource_Handler,
		},
		{
			MethodName: "DeleteAggregationSource",
			Handler:    _Aggregator_DeleteAggregationSource_Handler,
		},
		{
			MethodName: "CreateAggregate",
			Handler:    _Aggregator_CreateAggregate_Handler,
		},
		{
			MethodName: "GetAllAggregates",
			Handler:    _Aggregator_GetAllAggregates_Handler,
		},
		{
			MethodName: "GetAggregate",
			Handler:    _Aggregator_GetAggregate_Handler,
		},
		{
			MethodName: "DeleteAggregate",
			Handler:    _Aggregator_DeleteAggregate_Handler,
		},
		{
			MethodName: "AddElementsToAggregate",
			Handler:    _Aggregator_AddElementsToAggregate_Handler,
		},
		{
			MethodName: "RemoveElementsFromAggregate",
			Handler:    _Aggregator_RemoveElementsFromAggregate_Handler,
		},
		{
			MethodName: "ResetElementsOfAggregate",
			Handler:    _Aggregator_ResetElementsOfAggregate_Handler,
		},
		{
			MethodName: "SetDefaultBootOrderElementsOfAggregate",
			Handler:    _Aggregator_SetDefaultBootOrderElementsOfAggregate_Handler,
		},
		{
			MethodName: "GetAllConnectionMethods",
			Handler:    _Aggregator_GetAllConnectionMethods_Handler,
		},
		{
			MethodName: "GetConnectionMethod",
			Handler:    _Aggregator_GetConnectionMethod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aggregator.proto",
}
