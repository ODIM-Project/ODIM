// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/chassis/chassis.proto

package chassis

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Chassis service

type ChassisService interface {
	GetChassisCollection(ctx context.Context, in *GetChassisRequest, opts ...client.CallOption) (*GetChassisResponse, error)
	GetChassisResource(ctx context.Context, in *GetChassisRequest, opts ...client.CallOption) (*GetChassisResponse, error)
	GetChassisInfo(ctx context.Context, in *GetChassisRequest, opts ...client.CallOption) (*GetChassisResponse, error)
	CreateChassis(ctx context.Context, in *CreateChassisRequest, opts ...client.CallOption) (*GetChassisResponse, error)
}

type chassisService struct {
	c    client.Client
	name string
}

func NewChassisService(name string, c client.Client) ChassisService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "chassis"
	}
	return &chassisService{
		c:    c,
		name: name,
	}
}

func (c *chassisService) GetChassisCollection(ctx context.Context, in *GetChassisRequest, opts ...client.CallOption) (*GetChassisResponse, error) {
	req := c.c.NewRequest(c.name, "Chassis.GetChassisCollection", in)
	out := new(GetChassisResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chassisService) GetChassisResource(ctx context.Context, in *GetChassisRequest, opts ...client.CallOption) (*GetChassisResponse, error) {
	req := c.c.NewRequest(c.name, "Chassis.GetChassisResource", in)
	out := new(GetChassisResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chassisService) GetChassisInfo(ctx context.Context, in *GetChassisRequest, opts ...client.CallOption) (*GetChassisResponse, error) {
	req := c.c.NewRequest(c.name, "Chassis.GetChassisInfo", in)
	out := new(GetChassisResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chassisService) CreateChassis(ctx context.Context, in *CreateChassisRequest, opts ...client.CallOption) (*GetChassisResponse, error) {
	req := c.c.NewRequest(c.name, "Chassis.CreateChassis", in)
	out := new(GetChassisResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Chassis service

type ChassisHandler interface {
	GetChassisCollection(context.Context, *GetChassisRequest, *GetChassisResponse) error
	GetChassisResource(context.Context, *GetChassisRequest, *GetChassisResponse) error
	GetChassisInfo(context.Context, *GetChassisRequest, *GetChassisResponse) error
	CreateChassis(context.Context, *CreateChassisRequest, *GetChassisResponse) error
}

func RegisterChassisHandler(s server.Server, hdlr ChassisHandler, opts ...server.HandlerOption) error {
	type chassis interface {
		GetChassisCollection(ctx context.Context, in *GetChassisRequest, out *GetChassisResponse) error
		GetChassisResource(ctx context.Context, in *GetChassisRequest, out *GetChassisResponse) error
		GetChassisInfo(ctx context.Context, in *GetChassisRequest, out *GetChassisResponse) error
		CreateChassis(ctx context.Context, in *CreateChassisRequest, out *GetChassisResponse) error
	}
	type Chassis struct {
		chassis
	}
	h := &chassisHandler{hdlr}
	return s.Handle(s.NewHandler(&Chassis{h}, opts...))
}

type chassisHandler struct {
	ChassisHandler
}

func (h *chassisHandler) GetChassisCollection(ctx context.Context, in *GetChassisRequest, out *GetChassisResponse) error {
	return h.ChassisHandler.GetChassisCollection(ctx, in, out)
}

func (h *chassisHandler) GetChassisResource(ctx context.Context, in *GetChassisRequest, out *GetChassisResponse) error {
	return h.ChassisHandler.GetChassisResource(ctx, in, out)
}

func (h *chassisHandler) GetChassisInfo(ctx context.Context, in *GetChassisRequest, out *GetChassisResponse) error {
	return h.ChassisHandler.GetChassisInfo(ctx, in, out)
}

func (h *chassisHandler) CreateChassis(ctx context.Context, in *CreateChassisRequest, out *GetChassisResponse) error {
	return h.ChassisHandler.CreateChassis(ctx, in, out)
}
