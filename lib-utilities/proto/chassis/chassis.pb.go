// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chassis.proto

/*
Package chassis is a generated protocol buffer package.

It is generated from these files:
	chassis.proto

It has these top-level messages:
	GetChassisRequest
	GetChassisResponse
	CreateChassisRequest
	DeleteChassisRequest
	UpdateChassisRequest
*/
package chassis

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetChassisRequest struct {
	SessionToken string `protobuf:"bytes,1,opt,name=sessionToken" json:"sessionToken,omitempty"`
	RequestParam string `protobuf:"bytes,2,opt,name=requestParam" json:"requestParam,omitempty"`
	URL          string `protobuf:"bytes,3,opt,name=URL,json=uRL" json:"URL,omitempty"`
	ResourceID   string `protobuf:"bytes,4,opt,name=resourceID" json:"resourceID,omitempty"`
}

func (m *GetChassisRequest) Reset()                    { *m = GetChassisRequest{} }
func (m *GetChassisRequest) String() string            { return proto.CompactTextString(m) }
func (*GetChassisRequest) ProtoMessage()               {}
func (*GetChassisRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetChassisRequest) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

func (m *GetChassisRequest) GetRequestParam() string {
	if m != nil {
		return m.RequestParam
	}
	return ""
}

func (m *GetChassisRequest) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *GetChassisRequest) GetResourceID() string {
	if m != nil {
		return m.ResourceID
	}
	return ""
}

type GetChassisResponse struct {
	StatusCode    int32             `protobuf:"varint,1,opt,name=statusCode" json:"statusCode,omitempty"`
	StatusMessage string            `protobuf:"bytes,2,opt,name=statusMessage" json:"statusMessage,omitempty"`
	Header        map[string]string `protobuf:"bytes,3,rep,name=header" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Body          []byte            `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *GetChassisResponse) Reset()                    { *m = GetChassisResponse{} }
func (m *GetChassisResponse) String() string            { return proto.CompactTextString(m) }
func (*GetChassisResponse) ProtoMessage()               {}
func (*GetChassisResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetChassisResponse) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *GetChassisResponse) GetStatusMessage() string {
	if m != nil {
		return m.StatusMessage
	}
	return ""
}

func (m *GetChassisResponse) GetHeader() map[string]string {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GetChassisResponse) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type CreateChassisRequest struct {
	SessionToken string `protobuf:"bytes,1,opt,name=sessionToken" json:"sessionToken,omitempty"`
	RequestBody  []byte `protobuf:"bytes,2,opt,name=RequestBody,json=requestBody,proto3" json:"RequestBody,omitempty"`
}

func (m *CreateChassisRequest) Reset()                    { *m = CreateChassisRequest{} }
func (m *CreateChassisRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateChassisRequest) ProtoMessage()               {}
func (*CreateChassisRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CreateChassisRequest) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

func (m *CreateChassisRequest) GetRequestBody() []byte {
	if m != nil {
		return m.RequestBody
	}
	return nil
}

type DeleteChassisRequest struct {
	SessionToken string `protobuf:"bytes,1,opt,name=sessionToken" json:"sessionToken,omitempty"`
	URL          string `protobuf:"bytes,2,opt,name=URL,json=uRL" json:"URL,omitempty"`
}

func (m *DeleteChassisRequest) Reset()                    { *m = DeleteChassisRequest{} }
func (m *DeleteChassisRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteChassisRequest) ProtoMessage()               {}
func (*DeleteChassisRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DeleteChassisRequest) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

func (m *DeleteChassisRequest) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

type UpdateChassisRequest struct {
	SessionToken string `protobuf:"bytes,1,opt,name=sessionToken" json:"sessionToken,omitempty"`
	URL          string `protobuf:"bytes,2,opt,name=URL,json=uRL" json:"URL,omitempty"`
	RequestBody  []byte `protobuf:"bytes,3,opt,name=RequestBody,json=requestBody,proto3" json:"RequestBody,omitempty"`
}

func (m *UpdateChassisRequest) Reset()                    { *m = UpdateChassisRequest{} }
func (m *UpdateChassisRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateChassisRequest) ProtoMessage()               {}
func (*UpdateChassisRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UpdateChassisRequest) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

func (m *UpdateChassisRequest) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *UpdateChassisRequest) GetRequestBody() []byte {
	if m != nil {
		return m.RequestBody
	}
	return nil
}

func init() {
	proto.RegisterType((*GetChassisRequest)(nil), "GetChassisRequest")
	proto.RegisterType((*GetChassisResponse)(nil), "GetChassisResponse")
	proto.RegisterType((*CreateChassisRequest)(nil), "CreateChassisRequest")
	proto.RegisterType((*DeleteChassisRequest)(nil), "DeleteChassisRequest")
	proto.RegisterType((*UpdateChassisRequest)(nil), "UpdateChassisRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Chassis service

type ChassisClient interface {
	GetChassisCollection(ctx context.Context, in *GetChassisRequest, opts ...grpc.CallOption) (*GetChassisResponse, error)
	GetChassisResource(ctx context.Context, in *GetChassisRequest, opts ...grpc.CallOption) (*GetChassisResponse, error)
	GetChassisInfo(ctx context.Context, in *GetChassisRequest, opts ...grpc.CallOption) (*GetChassisResponse, error)
	CreateChassis(ctx context.Context, in *CreateChassisRequest, opts ...grpc.CallOption) (*GetChassisResponse, error)
	DeleteChassis(ctx context.Context, in *DeleteChassisRequest, opts ...grpc.CallOption) (*GetChassisResponse, error)
	UpdateChassis(ctx context.Context, in *UpdateChassisRequest, opts ...grpc.CallOption) (*GetChassisResponse, error)
}

type chassisClient struct {
	cc *grpc.ClientConn
}

func NewChassisClient(cc *grpc.ClientConn) ChassisClient {
	return &chassisClient{cc}
}

func (c *chassisClient) GetChassisCollection(ctx context.Context, in *GetChassisRequest, opts ...grpc.CallOption) (*GetChassisResponse, error) {
	out := new(GetChassisResponse)
	err := grpc.Invoke(ctx, "/Chassis/GetChassisCollection", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chassisClient) GetChassisResource(ctx context.Context, in *GetChassisRequest, opts ...grpc.CallOption) (*GetChassisResponse, error) {
	out := new(GetChassisResponse)
	err := grpc.Invoke(ctx, "/Chassis/GetChassisResource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chassisClient) GetChassisInfo(ctx context.Context, in *GetChassisRequest, opts ...grpc.CallOption) (*GetChassisResponse, error) {
	out := new(GetChassisResponse)
	err := grpc.Invoke(ctx, "/Chassis/GetChassisInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chassisClient) CreateChassis(ctx context.Context, in *CreateChassisRequest, opts ...grpc.CallOption) (*GetChassisResponse, error) {
	out := new(GetChassisResponse)
	err := grpc.Invoke(ctx, "/Chassis/CreateChassis", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chassisClient) DeleteChassis(ctx context.Context, in *DeleteChassisRequest, opts ...grpc.CallOption) (*GetChassisResponse, error) {
	out := new(GetChassisResponse)
	err := grpc.Invoke(ctx, "/Chassis/DeleteChassis", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chassisClient) UpdateChassis(ctx context.Context, in *UpdateChassisRequest, opts ...grpc.CallOption) (*GetChassisResponse, error) {
	out := new(GetChassisResponse)
	err := grpc.Invoke(ctx, "/Chassis/UpdateChassis", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Chassis service

type ChassisServer interface {
	GetChassisCollection(context.Context, *GetChassisRequest) (*GetChassisResponse, error)
	GetChassisResource(context.Context, *GetChassisRequest) (*GetChassisResponse, error)
	GetChassisInfo(context.Context, *GetChassisRequest) (*GetChassisResponse, error)
	CreateChassis(context.Context, *CreateChassisRequest) (*GetChassisResponse, error)
	DeleteChassis(context.Context, *DeleteChassisRequest) (*GetChassisResponse, error)
	UpdateChassis(context.Context, *UpdateChassisRequest) (*GetChassisResponse, error)
}

func RegisterChassisServer(s *grpc.Server, srv ChassisServer) {
	s.RegisterService(&_Chassis_serviceDesc, srv)
}

func _Chassis_GetChassisCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChassisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChassisServer).GetChassisCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chassis/GetChassisCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChassisServer).GetChassisCollection(ctx, req.(*GetChassisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chassis_GetChassisResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChassisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChassisServer).GetChassisResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chassis/GetChassisResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChassisServer).GetChassisResource(ctx, req.(*GetChassisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chassis_GetChassisInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChassisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChassisServer).GetChassisInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chassis/GetChassisInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChassisServer).GetChassisInfo(ctx, req.(*GetChassisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chassis_CreateChassis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChassisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChassisServer).CreateChassis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chassis/CreateChassis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChassisServer).CreateChassis(ctx, req.(*CreateChassisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chassis_DeleteChassis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChassisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChassisServer).DeleteChassis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chassis/DeleteChassis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChassisServer).DeleteChassis(ctx, req.(*DeleteChassisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chassis_UpdateChassis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChassisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChassisServer).UpdateChassis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chassis/UpdateChassis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChassisServer).UpdateChassis(ctx, req.(*UpdateChassisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Chassis_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Chassis",
	HandlerType: (*ChassisServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChassisCollection",
			Handler:    _Chassis_GetChassisCollection_Handler,
		},
		{
			MethodName: "GetChassisResource",
			Handler:    _Chassis_GetChassisResource_Handler,
		},
		{
			MethodName: "GetChassisInfo",
			Handler:    _Chassis_GetChassisInfo_Handler,
		},
		{
			MethodName: "CreateChassis",
			Handler:    _Chassis_CreateChassis_Handler,
		},
		{
			MethodName: "DeleteChassis",
			Handler:    _Chassis_DeleteChassis_Handler,
		},
		{
			MethodName: "UpdateChassis",
			Handler:    _Chassis_UpdateChassis_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chassis.proto",
}

func init() { proto.RegisterFile("chassis.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 404 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xcf, 0x6e, 0xda, 0x40,
	0x10, 0xc6, 0x6b, 0x1b, 0xa8, 0x3a, 0x86, 0xaa, 0x9d, 0x1a, 0xc9, 0xe2, 0xd0, 0x22, 0xab, 0x07,
	0x4e, 0x3e, 0xd0, 0x43, 0xff, 0xa9, 0xaa, 0x5a, 0x53, 0xb5, 0x48, 0x54, 0xaa, 0xac, 0x72, 0xeb,
	0x65, 0xc1, 0xd3, 0x80, 0x70, 0xbc, 0x64, 0x77, 0x1d, 0x89, 0x27, 0xc8, 0x29, 0x2f, 0x99, 0x27,
	0x89, 0xbc, 0x76, 0x82, 0x0d, 0x0e, 0x12, 0x28, 0xb7, 0xdd, 0x6f, 0xbf, 0x99, 0xfd, 0xbc, 0xbf,
	0x91, 0xa1, 0x33, 0x5f, 0x30, 0x29, 0x97, 0xd2, 0x5f, 0x0b, 0xae, 0xb8, 0x77, 0x6d, 0xc0, 0xcb,
	0x9f, 0xa4, 0x82, 0x5c, 0x0c, 0xe9, 0x22, 0x25, 0xa9, 0xd0, 0x83, 0xb6, 0x24, 0x29, 0x97, 0x3c,
	0xf9, 0xcb, 0x57, 0x94, 0xb8, 0x46, 0xdf, 0x18, 0x3c, 0x0b, 0x2b, 0x5a, 0xe6, 0x11, 0xb9, 0xfd,
	0x0f, 0x13, 0xec, 0xdc, 0x35, 0x73, 0x4f, 0x59, 0xc3, 0x17, 0x60, 0x4d, 0xc3, 0x89, 0x6b, 0xe9,
	0x23, 0x2b, 0x0d, 0x27, 0xf8, 0x1a, 0x40, 0x90, 0xe4, 0xa9, 0x98, 0xd3, 0x78, 0xe4, 0x36, 0xf4,
	0x41, 0x49, 0xf1, 0x6e, 0x0c, 0xc0, 0x72, 0x1e, 0xb9, 0xe6, 0x89, 0xa4, 0xac, 0x4c, 0x2a, 0xa6,
	0x52, 0x19, 0xf0, 0x88, 0x74, 0x9c, 0x66, 0x58, 0x52, 0xf0, 0x2d, 0x74, 0xf2, 0xdd, 0x6f, 0x92,
	0x92, 0x9d, 0x51, 0x91, 0xa6, 0x2a, 0xe2, 0x7b, 0x68, 0x2d, 0x88, 0x45, 0x24, 0x5c, 0xab, 0x6f,
	0x0d, 0xec, 0xe1, 0x1b, 0x7f, 0xff, 0x2a, 0xff, 0x97, 0x76, 0xfc, 0x48, 0x94, 0xd8, 0x84, 0x85,
	0x1d, 0x11, 0x1a, 0x33, 0x1e, 0x6d, 0x74, 0xde, 0x76, 0xa8, 0xd7, 0xbd, 0x8f, 0x60, 0x97, 0xac,
	0xd9, 0xa7, 0xae, 0x68, 0x53, 0xbc, 0x54, 0xb6, 0x44, 0x07, 0x9a, 0x97, 0x2c, 0x4e, 0xef, 0xb2,
	0xe4, 0x9b, 0x4f, 0xe6, 0x07, 0xc3, 0xfb, 0x07, 0x4e, 0x20, 0x88, 0x29, 0x3a, 0xe1, 0xd9, 0xfb,
	0x60, 0x17, 0xf6, 0xef, 0x59, 0x22, 0x53, 0x27, 0xb2, 0xc5, 0x56, 0xf2, 0x26, 0xe0, 0x8c, 0x28,
	0xa6, 0x93, 0xba, 0x17, 0xc0, 0xcc, 0x7b, 0x60, 0x5e, 0x02, 0xce, 0x74, 0x1d, 0xb1, 0xc7, 0xe9,
	0xb6, 0x9b, 0xde, 0xda, 0x4b, 0x3f, 0xbc, 0xb2, 0xe0, 0x69, 0x71, 0x15, 0x7e, 0x03, 0x67, 0x0b,
	0x28, 0xe0, 0x71, 0x4c, 0x73, 0xb5, 0xe4, 0x09, 0xa2, 0xbf, 0x37, 0xb2, 0xbd, 0x57, 0x35, 0x2c,
	0xbd, 0x27, 0xf8, 0x75, 0x67, 0x9c, 0xf4, 0x9c, 0x1d, 0xd3, 0xe0, 0x33, 0x3c, 0xdf, 0xea, 0xe3,
	0xe4, 0x3f, 0x3f, 0xa6, 0xf8, 0x0b, 0x74, 0x2a, 0xa0, 0xb1, 0xeb, 0xd7, 0x81, 0x3f, 0x50, 0x5e,
	0x21, 0x89, 0x5d, 0xbf, 0x8e, 0xec, 0x81, 0xf2, 0x0a, 0x3a, 0xec, 0xfa, 0x75, 0x28, 0x1f, 0x28,
	0x9f, 0xb5, 0xf4, 0x1f, 0xe2, 0xdd, 0x6d, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb7, 0xe7, 0xf9, 0x12,
	0x32, 0x04, 0x00, 0x00,
}
