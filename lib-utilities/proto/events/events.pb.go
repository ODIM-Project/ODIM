// Code generated by protoc-gen-go. DO NOT EDIT.
// source: events.proto

/*
Package events is a generated protocol buffer package.

It is generated from these files:
	events.proto

It has these top-level messages:
	EventSubRequest
	EventSubResponse
	EventRequest
	DefaultEventSubRequest
	DefaultEventSubResponse
	SubscribeEMBRequest
	SubscribeEMBResponse
*/
package events

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EventSubRequest struct {
	SessionToken string `protobuf:"bytes,1,opt,name=SessionToken,json=sessionToken" json:"SessionToken,omitempty"`
	PostBody     []byte `protobuf:"bytes,2,opt,name=PostBody,json=postBody,proto3" json:"PostBody,omitempty"`
}

func (m *EventSubRequest) Reset()                    { *m = EventSubRequest{} }
func (m *EventSubRequest) String() string            { return proto.CompactTextString(m) }
func (*EventSubRequest) ProtoMessage()               {}
func (*EventSubRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EventSubRequest) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

func (m *EventSubRequest) GetPostBody() []byte {
	if m != nil {
		return m.PostBody
	}
	return nil
}

type EventSubResponse struct {
	StatusCode    int32             `protobuf:"varint,1,opt,name=statusCode" json:"statusCode,omitempty"`
	StatusMessage string            `protobuf:"bytes,2,opt,name=statusMessage" json:"statusMessage,omitempty"`
	Location      string            `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	Body          []byte            `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	Header        map[string]string `protobuf:"bytes,5,rep,name=header" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *EventSubResponse) Reset()                    { *m = EventSubResponse{} }
func (m *EventSubResponse) String() string            { return proto.CompactTextString(m) }
func (*EventSubResponse) ProtoMessage()               {}
func (*EventSubResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EventSubResponse) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *EventSubResponse) GetStatusMessage() string {
	if m != nil {
		return m.StatusMessage
	}
	return ""
}

func (m *EventSubResponse) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *EventSubResponse) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *EventSubResponse) GetHeader() map[string]string {
	if m != nil {
		return m.Header
	}
	return nil
}

type EventRequest struct {
	SessionToken        string `protobuf:"bytes,1,opt,name=SessionToken,json=sessionToken" json:"SessionToken,omitempty"`
	EventSubscriptionID string `protobuf:"bytes,2,opt,name=EventSubscriptionID,json=eventSubscriptionID" json:"EventSubscriptionID,omitempty"`
	UUID                string `protobuf:"bytes,3,opt,name=UUID,json=uUID" json:"UUID,omitempty"`
}

func (m *EventRequest) Reset()                    { *m = EventRequest{} }
func (m *EventRequest) String() string            { return proto.CompactTextString(m) }
func (*EventRequest) ProtoMessage()               {}
func (*EventRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *EventRequest) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

func (m *EventRequest) GetEventSubscriptionID() string {
	if m != nil {
		return m.EventSubscriptionID
	}
	return ""
}

func (m *EventRequest) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

type DefaultEventSubRequest struct {
	SystemID      []string `protobuf:"bytes,1,rep,name=SystemID,json=systemID" json:"SystemID,omitempty"`
	EventTypes    []string `protobuf:"bytes,2,rep,name=EventTypes,json=eventTypes" json:"EventTypes,omitempty"`
	MessageIDs    []string `protobuf:"bytes,3,rep,name=MessageIDs,json=messageIDs" json:"MessageIDs,omitempty"`
	ResourceTypes []string `protobuf:"bytes,4,rep,name=ResourceTypes,json=resourceTypes" json:"ResourceTypes,omitempty"`
	Protocol      string   `protobuf:"bytes,5,opt,name=Protocol,json=protocol" json:"Protocol,omitempty"`
}

func (m *DefaultEventSubRequest) Reset()                    { *m = DefaultEventSubRequest{} }
func (m *DefaultEventSubRequest) String() string            { return proto.CompactTextString(m) }
func (*DefaultEventSubRequest) ProtoMessage()               {}
func (*DefaultEventSubRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DefaultEventSubRequest) GetSystemID() []string {
	if m != nil {
		return m.SystemID
	}
	return nil
}

func (m *DefaultEventSubRequest) GetEventTypes() []string {
	if m != nil {
		return m.EventTypes
	}
	return nil
}

func (m *DefaultEventSubRequest) GetMessageIDs() []string {
	if m != nil {
		return m.MessageIDs
	}
	return nil
}

func (m *DefaultEventSubRequest) GetResourceTypes() []string {
	if m != nil {
		return m.ResourceTypes
	}
	return nil
}

func (m *DefaultEventSubRequest) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

type DefaultEventSubResponse struct {
	TaskURL string `protobuf:"bytes,1,opt,name=TaskURL,json=taskURL" json:"TaskURL,omitempty"`
}

func (m *DefaultEventSubResponse) Reset()                    { *m = DefaultEventSubResponse{} }
func (m *DefaultEventSubResponse) String() string            { return proto.CompactTextString(m) }
func (*DefaultEventSubResponse) ProtoMessage()               {}
func (*DefaultEventSubResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DefaultEventSubResponse) GetTaskURL() string {
	if m != nil {
		return m.TaskURL
	}
	return ""
}

type SubscribeEMBRequest struct {
	PluginID     string   `protobuf:"bytes,1,opt,name=PluginID,json=pluginID" json:"PluginID,omitempty"`
	EMBType      string   `protobuf:"bytes,2,opt,name=EMBType,json=eMBType" json:"EMBType,omitempty"`
	EMBQueueName []string `protobuf:"bytes,3,rep,name=EMBQueueName,json=eMBQueueName" json:"EMBQueueName,omitempty"`
}

func (m *SubscribeEMBRequest) Reset()                    { *m = SubscribeEMBRequest{} }
func (m *SubscribeEMBRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribeEMBRequest) ProtoMessage()               {}
func (*SubscribeEMBRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SubscribeEMBRequest) GetPluginID() string {
	if m != nil {
		return m.PluginID
	}
	return ""
}

func (m *SubscribeEMBRequest) GetEMBType() string {
	if m != nil {
		return m.EMBType
	}
	return ""
}

func (m *SubscribeEMBRequest) GetEMBQueueName() []string {
	if m != nil {
		return m.EMBQueueName
	}
	return nil
}

type SubscribeEMBResponse struct {
	Status bool `protobuf:"varint,1,opt,name=Status,json=status" json:"Status,omitempty"`
}

func (m *SubscribeEMBResponse) Reset()                    { *m = SubscribeEMBResponse{} }
func (m *SubscribeEMBResponse) String() string            { return proto.CompactTextString(m) }
func (*SubscribeEMBResponse) ProtoMessage()               {}
func (*SubscribeEMBResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SubscribeEMBResponse) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func init() {
	proto.RegisterType((*EventSubRequest)(nil), "EventSubRequest")
	proto.RegisterType((*EventSubResponse)(nil), "EventSubResponse")
	proto.RegisterType((*EventRequest)(nil), "EventRequest")
	proto.RegisterType((*DefaultEventSubRequest)(nil), "DefaultEventSubRequest")
	proto.RegisterType((*DefaultEventSubResponse)(nil), "DefaultEventSubResponse")
	proto.RegisterType((*SubscribeEMBRequest)(nil), "SubscribeEMBRequest")
	proto.RegisterType((*SubscribeEMBResponse)(nil), "SubscribeEMBResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Events service

type EventsClient interface {
	GetEventService(ctx context.Context, in *EventSubRequest, opts ...grpc.CallOption) (*EventSubResponse, error)
	SubmitTestEvent(ctx context.Context, in *EventSubRequest, opts ...grpc.CallOption) (*EventSubResponse, error)
	CreateEventSubscription(ctx context.Context, in *EventSubRequest, opts ...grpc.CallOption) (*EventSubResponse, error)
	GetEventSubscription(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventSubResponse, error)
	DeleteEventSubscription(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventSubResponse, error)
	CreateDefaultEventSubscription(ctx context.Context, in *DefaultEventSubRequest, opts ...grpc.CallOption) (*DefaultEventSubResponse, error)
	GetEventSubscriptionsCollection(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventSubResponse, error)
	SubsribeEMB(ctx context.Context, in *SubscribeEMBRequest, opts ...grpc.CallOption) (*SubscribeEMBResponse, error)
}

type eventsClient struct {
	cc *grpc.ClientConn
}

func NewEventsClient(cc *grpc.ClientConn) EventsClient {
	return &eventsClient{cc}
}

func (c *eventsClient) GetEventService(ctx context.Context, in *EventSubRequest, opts ...grpc.CallOption) (*EventSubResponse, error) {
	out := new(EventSubResponse)
	err := grpc.Invoke(ctx, "/Events/GetEventService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) SubmitTestEvent(ctx context.Context, in *EventSubRequest, opts ...grpc.CallOption) (*EventSubResponse, error) {
	out := new(EventSubResponse)
	err := grpc.Invoke(ctx, "/Events/SubmitTestEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) CreateEventSubscription(ctx context.Context, in *EventSubRequest, opts ...grpc.CallOption) (*EventSubResponse, error) {
	out := new(EventSubResponse)
	err := grpc.Invoke(ctx, "/Events/CreateEventSubscription", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) GetEventSubscription(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventSubResponse, error) {
	out := new(EventSubResponse)
	err := grpc.Invoke(ctx, "/Events/GetEventSubscription", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) DeleteEventSubscription(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventSubResponse, error) {
	out := new(EventSubResponse)
	err := grpc.Invoke(ctx, "/Events/DeleteEventSubscription", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) CreateDefaultEventSubscription(ctx context.Context, in *DefaultEventSubRequest, opts ...grpc.CallOption) (*DefaultEventSubResponse, error) {
	out := new(DefaultEventSubResponse)
	err := grpc.Invoke(ctx, "/Events/CreateDefaultEventSubscription", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) GetEventSubscriptionsCollection(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventSubResponse, error) {
	out := new(EventSubResponse)
	err := grpc.Invoke(ctx, "/Events/GetEventSubscriptionsCollection", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventsClient) SubsribeEMB(ctx context.Context, in *SubscribeEMBRequest, opts ...grpc.CallOption) (*SubscribeEMBResponse, error) {
	out := new(SubscribeEMBResponse)
	err := grpc.Invoke(ctx, "/Events/SubsribeEMB", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Events service

type EventsServer interface {
	GetEventService(context.Context, *EventSubRequest) (*EventSubResponse, error)
	SubmitTestEvent(context.Context, *EventSubRequest) (*EventSubResponse, error)
	CreateEventSubscription(context.Context, *EventSubRequest) (*EventSubResponse, error)
	GetEventSubscription(context.Context, *EventRequest) (*EventSubResponse, error)
	DeleteEventSubscription(context.Context, *EventRequest) (*EventSubResponse, error)
	CreateDefaultEventSubscription(context.Context, *DefaultEventSubRequest) (*DefaultEventSubResponse, error)
	GetEventSubscriptionsCollection(context.Context, *EventRequest) (*EventSubResponse, error)
	SubsribeEMB(context.Context, *SubscribeEMBRequest) (*SubscribeEMBResponse, error)
}

func RegisterEventsServer(s *grpc.Server, srv EventsServer) {
	s.RegisterService(&_Events_serviceDesc, srv)
}

func _Events_GetEventService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventSubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).GetEventService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Events/GetEventService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).GetEventService(ctx, req.(*EventSubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_SubmitTestEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventSubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).SubmitTestEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Events/SubmitTestEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).SubmitTestEvent(ctx, req.(*EventSubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_CreateEventSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventSubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).CreateEventSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Events/CreateEventSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).CreateEventSubscription(ctx, req.(*EventSubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_GetEventSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).GetEventSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Events/GetEventSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).GetEventSubscription(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_DeleteEventSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).DeleteEventSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Events/DeleteEventSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).DeleteEventSubscription(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_CreateDefaultEventSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultEventSubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).CreateDefaultEventSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Events/CreateDefaultEventSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).CreateDefaultEventSubscription(ctx, req.(*DefaultEventSubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_GetEventSubscriptionsCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).GetEventSubscriptionsCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Events/GetEventSubscriptionsCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).GetEventSubscriptionsCollection(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Events_SubsribeEMB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeEMBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventsServer).SubsribeEMB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Events/SubsribeEMB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventsServer).SubsribeEMB(ctx, req.(*SubscribeEMBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Events_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Events",
	HandlerType: (*EventsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEventService",
			Handler:    _Events_GetEventService_Handler,
		},
		{
			MethodName: "SubmitTestEvent",
			Handler:    _Events_SubmitTestEvent_Handler,
		},
		{
			MethodName: "CreateEventSubscription",
			Handler:    _Events_CreateEventSubscription_Handler,
		},
		{
			MethodName: "GetEventSubscription",
			Handler:    _Events_GetEventSubscription_Handler,
		},
		{
			MethodName: "DeleteEventSubscription",
			Handler:    _Events_DeleteEventSubscription_Handler,
		},
		{
			MethodName: "CreateDefaultEventSubscription",
			Handler:    _Events_CreateDefaultEventSubscription_Handler,
		},
		{
			MethodName: "GetEventSubscriptionsCollection",
			Handler:    _Events_GetEventSubscriptionsCollection_Handler,
		},
		{
			MethodName: "SubsribeEMB",
			Handler:    _Events_SubsribeEMB_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "events.proto",
}

func init() { proto.RegisterFile("events.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 596 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xdd, 0x6e, 0xda, 0x4c,
	0x10, 0x8d, 0xc3, 0x4f, 0xc8, 0xc4, 0x28, 0x7c, 0x0b, 0x5f, 0xb0, 0x2c, 0x35, 0x45, 0x56, 0x2f,
	0xb8, 0xb2, 0xaa, 0x44, 0x95, 0xd2, 0xa8, 0x95, 0x2a, 0xb0, 0xd5, 0x22, 0x95, 0x2a, 0x31, 0xf0,
	0x00, 0xc6, 0x4c, 0x53, 0x0b, 0xe3, 0x75, 0xbd, 0x6b, 0x54, 0x1e, 0xa4, 0xaf, 0xd2, 0x87, 0xeb,
	0x55, 0xb5, 0xeb, 0x0d, 0x71, 0xc0, 0x95, 0xe8, 0xdd, 0x9e, 0x99, 0x9d, 0x33, 0x67, 0x66, 0x0e,
	0xe8, 0xb8, 0xc6, 0x98, 0x33, 0x3b, 0x49, 0x29, 0xa7, 0xd6, 0x3d, 0x9c, 0xbb, 0x02, 0x4f, 0xb2,
	0xb9, 0x87, 0xdf, 0x33, 0x64, 0x9c, 0x58, 0xa0, 0x4f, 0x90, 0xb1, 0x90, 0xc6, 0x53, 0xba, 0xc4,
	0xd8, 0xd0, 0x7a, 0x5a, 0xff, 0xd4, 0xd3, 0x59, 0x21, 0x46, 0x4c, 0x68, 0xdc, 0x51, 0xc6, 0x07,
	0x74, 0xb1, 0x31, 0x8e, 0x7b, 0x5a, 0x5f, 0xf7, 0x1a, 0x89, 0xc2, 0xd6, 0x6f, 0x0d, 0x5a, 0x4f,
	0x9c, 0x2c, 0xa1, 0x31, 0x43, 0x72, 0x09, 0xc0, 0xb8, 0xcf, 0x33, 0x36, 0xa4, 0x0b, 0x94, 0x94,
	0x35, 0xaf, 0x10, 0x21, 0xaf, 0xa0, 0x99, 0xa3, 0x31, 0x32, 0xe6, 0x3f, 0xa0, 0x64, 0x3d, 0xf5,
	0x9e, 0x07, 0x45, 0xdb, 0x88, 0x06, 0x3e, 0x0f, 0x69, 0x6c, 0x54, 0xe4, 0x87, 0x2d, 0x26, 0x04,
	0xaa, 0x73, 0x21, 0xa7, 0x2a, 0xe5, 0xc8, 0x37, 0x79, 0x03, 0xf5, 0x6f, 0xe8, 0x2f, 0x30, 0x35,
	0x6a, 0xbd, 0x4a, 0xff, 0xec, 0xea, 0x85, 0xbd, 0x2b, 0xcc, 0xfe, 0x24, 0xf3, 0x6e, 0xcc, 0xd3,
	0x8d, 0xa7, 0x3e, 0x9b, 0x6f, 0xe1, 0xac, 0x10, 0x26, 0x2d, 0xa8, 0x2c, 0x71, 0xa3, 0xf6, 0x20,
	0x9e, 0xa4, 0x03, 0xb5, 0xb5, 0x1f, 0x65, 0x8f, 0x2a, 0x73, 0x70, 0x7b, 0x7c, 0xa3, 0x59, 0x3f,
	0x40, 0x97, 0x2d, 0xfe, 0x65, 0x99, 0xaf, 0xa1, 0xfd, 0x28, 0x8b, 0x05, 0x69, 0x98, 0x88, 0x71,
	0x46, 0x8e, 0xe2, 0x6e, 0xe3, 0x7e, 0x4a, 0xcc, 0x3a, 0x9b, 0x8d, 0x1c, 0xb5, 0x83, 0x6a, 0x36,
	0x1b, 0x39, 0xd6, 0x2f, 0x0d, 0x2e, 0x1c, 0xfc, 0xea, 0x67, 0x11, 0xdf, 0xbd, 0xa8, 0x09, 0x8d,
	0xc9, 0x86, 0x71, 0x5c, 0x8d, 0x1c, 0x43, 0xeb, 0x55, 0xc4, 0xda, 0x98, 0xc2, 0xe2, 0x30, 0xf2,
	0xfb, 0x74, 0x93, 0x20, 0x33, 0x8e, 0x65, 0x16, 0x70, 0x1b, 0x11, 0x79, 0xb5, 0xfd, 0x91, 0xc3,
	0x8c, 0x4a, 0x9e, 0x5f, 0x6d, 0x23, 0xe2, 0x70, 0x1e, 0x32, 0x9a, 0xa5, 0x01, 0xe6, 0x14, 0x55,
	0xf9, 0xa5, 0x99, 0x16, 0x83, 0xd2, 0x2f, 0xc2, 0x6f, 0x01, 0x8d, 0x8c, 0x5a, 0x7e, 0xb8, 0x44,
	0x61, 0xeb, 0x1a, 0xba, 0x7b, 0xba, 0x95, 0x6b, 0x0c, 0x38, 0x99, 0xfa, 0x6c, 0x39, 0xf3, 0x3e,
	0xab, 0xc5, 0x9d, 0xf0, 0x1c, 0x5a, 0x14, 0xda, 0x6a, 0x27, 0x73, 0x74, 0xc7, 0x83, 0xc2, 0xa4,
	0x77, 0x51, 0xf6, 0x10, 0xc6, 0x72, 0xd2, 0xbc, 0x8f, 0xc2, 0x82, 0xcc, 0x1d, 0x0f, 0x84, 0x1e,
	0xb5, 0xda, 0x13, 0xcc, 0xa1, 0x38, 0x92, 0x3b, 0x1e, 0xdc, 0x67, 0x98, 0xe1, 0x17, 0x7f, 0x85,
	0x6a, 0x4a, 0x1d, 0x0b, 0x31, 0xcb, 0x86, 0xce, 0xf3, 0x86, 0x4a, 0xe2, 0x05, 0xd4, 0x27, 0xd2,
	0xa3, 0xb2, 0x5f, 0xc3, 0xab, 0xe7, 0x8e, 0xbd, 0xfa, 0x59, 0x85, 0xba, 0x9c, 0x87, 0x91, 0x1b,
	0x38, 0xff, 0x88, 0x6a, 0x38, 0x4c, 0xd7, 0x61, 0x80, 0xa4, 0x65, 0xef, 0xdc, 0xc8, 0xfc, 0x6f,
	0xcf, 0x9a, 0xd6, 0x91, 0xa8, 0x9c, 0x64, 0xf3, 0x55, 0xc8, 0xa7, 0xc8, 0x72, 0x82, 0x43, 0x2b,
	0x3f, 0x40, 0x77, 0x98, 0xa2, 0xcf, 0x71, 0xcf, 0x59, 0x87, 0x32, 0xdc, 0x42, 0x67, 0xab, 0xba,
	0x58, 0xde, 0xb4, 0x8b, 0x06, 0x2f, 0xaf, 0x7d, 0x2f, 0x4e, 0x1a, 0x61, 0x59, 0xf7, 0x43, 0xca,
	0x67, 0x70, 0x99, 0x8b, 0xdf, 0xf1, 0xc5, 0x13, 0x4b, 0xd7, 0x2e, 0xb7, 0xba, 0x69, 0xd8, 0x7f,
	0xf1, 0x92, 0x75, 0x44, 0x5c, 0x78, 0x59, 0x36, 0x11, 0x1b, 0xd2, 0x28, 0xc2, 0xe0, 0x60, 0x75,
	0xef, 0xe0, 0x4c, 0x94, 0x2b, 0x23, 0x90, 0x8e, 0x5d, 0x62, 0x44, 0xf3, 0x7f, 0xbb, 0xcc, 0x2d,
	0xd6, 0xd1, 0xbc, 0x2e, 0x7d, 0x7f, 0xfd, 0x27, 0x00, 0x00, 0xff, 0xff, 0x00, 0x59, 0x36, 0x2d,
	0x87, 0x05, 0x00, 0x00,
}
