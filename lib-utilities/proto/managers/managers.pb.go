// Code generated by protoc-gen-go. DO NOT EDIT.
// source: managers.proto

package managers

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ManagerRequest struct {
	SessionToken         string   `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	ManagerID            string   `protobuf:"bytes,2,opt,name=managerID,proto3" json:"managerID,omitempty"`
	URL                  string   `protobuf:"bytes,3,opt,name=URL,proto3" json:"URL,omitempty"`
	ResourceID           string   `protobuf:"bytes,4,opt,name=resourceID,proto3" json:"resourceID,omitempty"`
	RequestBody          []byte   `protobuf:"bytes,5,opt,name=RequestBody,proto3" json:"RequestBody,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ManagerRequest) Reset()         { *m = ManagerRequest{} }
func (m *ManagerRequest) String() string { return proto.CompactTextString(m) }
func (*ManagerRequest) ProtoMessage()    {}
func (*ManagerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_49f5910ae72958ed, []int{0}
}

func (m *ManagerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ManagerRequest.Unmarshal(m, b)
}
func (m *ManagerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ManagerRequest.Marshal(b, m, deterministic)
}
func (m *ManagerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManagerRequest.Merge(m, src)
}
func (m *ManagerRequest) XXX_Size() int {
	return xxx_messageInfo_ManagerRequest.Size(m)
}
func (m *ManagerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ManagerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ManagerRequest proto.InternalMessageInfo

func (m *ManagerRequest) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

func (m *ManagerRequest) GetManagerID() string {
	if m != nil {
		return m.ManagerID
	}
	return ""
}

func (m *ManagerRequest) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *ManagerRequest) GetResourceID() string {
	if m != nil {
		return m.ResourceID
	}
	return ""
}

func (m *ManagerRequest) GetRequestBody() []byte {
	if m != nil {
		return m.RequestBody
	}
	return nil
}

type ManagerResponse struct {
	StatusCode           int32             `protobuf:"varint,1,opt,name=statusCode,proto3" json:"statusCode,omitempty"`
	StatusMessage        string            `protobuf:"bytes,2,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
	Body                 []byte            `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	Header               map[string]string `protobuf:"bytes,5,rep,name=header,proto3" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ManagerResponse) Reset()         { *m = ManagerResponse{} }
func (m *ManagerResponse) String() string { return proto.CompactTextString(m) }
func (*ManagerResponse) ProtoMessage()    {}
func (*ManagerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_49f5910ae72958ed, []int{1}
}

func (m *ManagerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ManagerResponse.Unmarshal(m, b)
}
func (m *ManagerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ManagerResponse.Marshal(b, m, deterministic)
}
func (m *ManagerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManagerResponse.Merge(m, src)
}
func (m *ManagerResponse) XXX_Size() int {
	return xxx_messageInfo_ManagerResponse.Size(m)
}
func (m *ManagerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ManagerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ManagerResponse proto.InternalMessageInfo

func (m *ManagerResponse) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *ManagerResponse) GetStatusMessage() string {
	if m != nil {
		return m.StatusMessage
	}
	return ""
}

func (m *ManagerResponse) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *ManagerResponse) GetHeader() map[string]string {
	if m != nil {
		return m.Header
	}
	return nil
}

func init() {
	proto.RegisterType((*ManagerRequest)(nil), "ManagerRequest")
	proto.RegisterType((*ManagerResponse)(nil), "ManagerResponse")
	proto.RegisterMapType((map[string]string)(nil), "ManagerResponse.HeaderEntry")
}

func init() { proto.RegisterFile("managers.proto", fileDescriptor_49f5910ae72958ed) }

var fileDescriptor_49f5910ae72958ed = []byte{
	// 349 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xc1, 0x4e, 0xc2, 0x40,
	0x10, 0x86, 0x2d, 0x50, 0x22, 0x03, 0x02, 0xae, 0x9a, 0x34, 0x84, 0x98, 0xa6, 0xf1, 0xc0, 0xa9,
	0x89, 0xe8, 0x01, 0x88, 0x27, 0x81, 0x28, 0x89, 0x5c, 0x1a, 0xf5, 0xbe, 0xd0, 0x09, 0x56, 0x6a,
	0x17, 0x77, 0xb6, 0x26, 0xbc, 0x90, 0x27, 0x1f, 0xc9, 0x87, 0x31, 0x5d, 0x8a, 0x14, 0x4e, 0xbd,
	0xcd, 0x7c, 0xbb, 0xff, 0xfe, 0x7f, 0x66, 0x16, 0xea, 0x1f, 0x3c, 0xe2, 0x0b, 0x94, 0xe4, 0xae,
	0xa4, 0x50, 0xc2, 0xf9, 0x36, 0xa0, 0x3e, 0xdd, 0x20, 0x0f, 0x3f, 0x63, 0x24, 0xc5, 0x1c, 0xa8,
	0x11, 0x12, 0x05, 0x22, 0x7a, 0x16, 0x4b, 0x8c, 0x2c, 0xc3, 0x36, 0x3a, 0x15, 0x6f, 0x8f, 0xb1,
	0x36, 0x54, 0xd2, 0x87, 0x26, 0x23, 0xab, 0xa0, 0x2f, 0xec, 0x00, 0x6b, 0x42, 0xf1, 0xc5, 0x7b,
	0xb2, 0x8a, 0x9a, 0x27, 0x25, 0xbb, 0x04, 0x90, 0x48, 0x22, 0x96, 0x73, 0x9c, 0x8c, 0xac, 0x92,
	0x3e, 0xc8, 0x10, 0x66, 0x43, 0x35, 0xb5, 0xbf, 0x17, 0xfe, 0xda, 0x32, 0x6d, 0xa3, 0x53, 0xf3,
	0xb2, 0xc8, 0xf9, 0x35, 0xa0, 0xf1, 0x1f, 0x94, 0x56, 0x22, 0x22, 0x4c, 0x5e, 0x25, 0xc5, 0x55,
	0x4c, 0x43, 0xe1, 0xa3, 0xce, 0x69, 0x7a, 0x19, 0xc2, 0xae, 0xe0, 0x64, 0xd3, 0x4d, 0x91, 0x88,
	0x2f, 0x30, 0x4d, 0xba, 0x0f, 0x19, 0x83, 0xd2, 0x2c, 0x31, 0x2d, 0x69, 0x53, 0x5d, 0xb3, 0x5b,
	0x28, 0xbf, 0x21, 0xf7, 0x51, 0x5a, 0xa6, 0x5d, 0xec, 0x54, 0xbb, 0x6d, 0xf7, 0xc0, 0xdb, 0x7d,
	0xd4, 0xc7, 0xe3, 0x48, 0xc9, 0xb5, 0x97, 0xde, 0x6d, 0xf5, 0xa1, 0x9a, 0xc1, 0xc9, 0x18, 0x96,
	0xb8, 0x4e, 0xe7, 0x97, 0x94, 0xec, 0x1c, 0xcc, 0x2f, 0x1e, 0xc6, 0xdb, 0x20, 0x9b, 0x66, 0x50,
	0xe8, 0x19, 0xdd, 0x9f, 0x02, 0x1c, 0xa7, 0x16, 0xc4, 0xee, 0xe0, 0xe2, 0x01, 0xd5, 0xb6, 0x1d,
	0x8a, 0x30, 0xc4, 0xb9, 0x0a, 0x44, 0xc4, 0x1a, 0xee, 0xfe, 0xae, 0x5a, 0xcd, 0xc3, 0x5c, 0xce,
	0x11, 0xbb, 0x06, 0xd8, 0xa9, 0xf3, 0x49, 0x06, 0x70, 0x96, 0x31, 0xf4, 0xd2, 0xbd, 0xe4, 0xd3,
	0xf6, 0x81, 0xbd, 0x06, 0x52, 0xc5, 0x3c, 0x9c, 0xa2, 0x1f, 0xf0, 0x49, 0x44, 0x28, 0x55, 0x3e,
	0x69, 0x0f, 0x4e, 0xb3, 0xd2, 0xf1, 0x3b, 0xce, 0xf3, 0x29, 0x67, 0x65, 0xfd, 0x7b, 0x6f, 0xfe,
	0x02, 0x00, 0x00, 0xff, 0xff, 0xf3, 0xcd, 0x99, 0xb3, 0xcf, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ManagersClient is the client API for Managers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ManagersClient interface {
	GetManagersCollection(ctx context.Context, in *ManagerRequest, opts ...grpc.CallOption) (*ManagerResponse, error)
	GetManager(ctx context.Context, in *ManagerRequest, opts ...grpc.CallOption) (*ManagerResponse, error)
	GetManagersResource(ctx context.Context, in *ManagerRequest, opts ...grpc.CallOption) (*ManagerResponse, error)
	VirtualMediaInsert(ctx context.Context, in *ManagerRequest, opts ...grpc.CallOption) (*ManagerResponse, error)
	VirtualMediaEject(ctx context.Context, in *ManagerRequest, opts ...grpc.CallOption) (*ManagerResponse, error)
}

type managersClient struct {
	cc *grpc.ClientConn
}

func NewManagersClient(cc *grpc.ClientConn) ManagersClient {
	return &managersClient{cc}
}

func (c *managersClient) GetManagersCollection(ctx context.Context, in *ManagerRequest, opts ...grpc.CallOption) (*ManagerResponse, error) {
	out := new(ManagerResponse)
	err := c.cc.Invoke(ctx, "/Managers/GetManagersCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managersClient) GetManager(ctx context.Context, in *ManagerRequest, opts ...grpc.CallOption) (*ManagerResponse, error) {
	out := new(ManagerResponse)
	err := c.cc.Invoke(ctx, "/Managers/GetManager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managersClient) GetManagersResource(ctx context.Context, in *ManagerRequest, opts ...grpc.CallOption) (*ManagerResponse, error) {
	out := new(ManagerResponse)
	err := c.cc.Invoke(ctx, "/Managers/GetManagersResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managersClient) VirtualMediaInsert(ctx context.Context, in *ManagerRequest, opts ...grpc.CallOption) (*ManagerResponse, error) {
	out := new(ManagerResponse)
	err := c.cc.Invoke(ctx, "/Managers/VirtualMediaInsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managersClient) VirtualMediaEject(ctx context.Context, in *ManagerRequest, opts ...grpc.CallOption) (*ManagerResponse, error) {
	out := new(ManagerResponse)
	err := c.cc.Invoke(ctx, "/Managers/VirtualMediaEject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagersServer is the server API for Managers service.
type ManagersServer interface {
	GetManagersCollection(context.Context, *ManagerRequest) (*ManagerResponse, error)
	GetManager(context.Context, *ManagerRequest) (*ManagerResponse, error)
	GetManagersResource(context.Context, *ManagerRequest) (*ManagerResponse, error)
	VirtualMediaInsert(context.Context, *ManagerRequest) (*ManagerResponse, error)
	VirtualMediaEject(context.Context, *ManagerRequest) (*ManagerResponse, error)
}

// UnimplementedManagersServer can be embedded to have forward compatible implementations.
type UnimplementedManagersServer struct {
}

func (*UnimplementedManagersServer) GetManagersCollection(ctx context.Context, req *ManagerRequest) (*ManagerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManagersCollection not implemented")
}
func (*UnimplementedManagersServer) GetManager(ctx context.Context, req *ManagerRequest) (*ManagerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManager not implemented")
}
func (*UnimplementedManagersServer) GetManagersResource(ctx context.Context, req *ManagerRequest) (*ManagerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManagersResource not implemented")
}
func (*UnimplementedManagersServer) VirtualMediaInsert(ctx context.Context, req *ManagerRequest) (*ManagerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VirtualMediaInsert not implemented")
}
func (*UnimplementedManagersServer) VirtualMediaEject(ctx context.Context, req *ManagerRequest) (*ManagerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VirtualMediaEject not implemented")
}

func RegisterManagersServer(s *grpc.Server, srv ManagersServer) {
	s.RegisterService(&_Managers_serviceDesc, srv)
}

func _Managers_GetManagersCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagersServer).GetManagersCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Managers/GetManagersCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagersServer).GetManagersCollection(ctx, req.(*ManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Managers_GetManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagersServer).GetManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Managers/GetManager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagersServer).GetManager(ctx, req.(*ManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Managers_GetManagersResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagersServer).GetManagersResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Managers/GetManagersResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagersServer).GetManagersResource(ctx, req.(*ManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Managers_VirtualMediaInsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagersServer).VirtualMediaInsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Managers/VirtualMediaInsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagersServer).VirtualMediaInsert(ctx, req.(*ManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Managers_VirtualMediaEject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagersServer).VirtualMediaEject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Managers/VirtualMediaEject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagersServer).VirtualMediaEject(ctx, req.(*ManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Managers_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Managers",
	HandlerType: (*ManagersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetManagersCollection",
			Handler:    _Managers_GetManagersCollection_Handler,
		},
		{
			MethodName: "GetManager",
			Handler:    _Managers_GetManager_Handler,
		},
		{
			MethodName: "GetManagersResource",
			Handler:    _Managers_GetManagersResource_Handler,
		},
		{
			MethodName: "VirtualMediaInsert",
			Handler:    _Managers_VirtualMediaInsert_Handler,
		},
		{
			MethodName: "VirtualMediaEject",
			Handler:    _Managers_VirtualMediaEject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "managers.proto",
}
