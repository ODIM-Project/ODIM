// Code generated by protoc-gen-go. DO NOT EDIT.
// source: role.proto

/*
Package role is a generated protocol buffer package.

It is generated from these files:
	role.proto

It has these top-level messages:
	RoleRequest
	GetRoleRequest
	RoleResponse
	DeleteRoleRequest
	UpdateRoleRequest
*/
package role

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Message for Create and Update Role request
type RoleRequest struct {
	SessionToken string `protobuf:"bytes,1,opt,name=sessionToken" json:"sessionToken,omitempty"`
	RequestBody  []byte `protobuf:"bytes,2,opt,name=RequestBody,json=requestBody,proto3" json:"RequestBody,omitempty"`
}

func (m *RoleRequest) Reset()                    { *m = RoleRequest{} }
func (m *RoleRequest) String() string            { return proto.CompactTextString(m) }
func (*RoleRequest) ProtoMessage()               {}
func (*RoleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RoleRequest) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

func (m *RoleRequest) GetRequestBody() []byte {
	if m != nil {
		return m.RequestBody
	}
	return nil
}

// Message for GetRole and GetAllRoles request
type GetRoleRequest struct {
	SessionToken string `protobuf:"bytes,1,opt,name=sessionToken" json:"sessionToken,omitempty"`
	Id           string `protobuf:"bytes,2,opt,name=Id,json=id" json:"Id,omitempty"`
}

func (m *GetRoleRequest) Reset()                    { *m = GetRoleRequest{} }
func (m *GetRoleRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRoleRequest) ProtoMessage()               {}
func (*GetRoleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetRoleRequest) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

func (m *GetRoleRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Message for sending response
type RoleResponse struct {
	StatusCode    int32             `protobuf:"varint,1,opt,name=statusCode" json:"statusCode,omitempty"`
	StatusMessage string            `protobuf:"bytes,2,opt,name=statusMessage" json:"statusMessage,omitempty"`
	Header        map[string]string `protobuf:"bytes,3,rep,name=header" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Body          []byte            `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *RoleResponse) Reset()                    { *m = RoleResponse{} }
func (m *RoleResponse) String() string            { return proto.CompactTextString(m) }
func (*RoleResponse) ProtoMessage()               {}
func (*RoleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RoleResponse) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *RoleResponse) GetStatusMessage() string {
	if m != nil {
		return m.StatusMessage
	}
	return ""
}

func (m *RoleResponse) GetHeader() map[string]string {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *RoleResponse) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

// Message for Delete Role request
type DeleteRoleRequest struct {
	SessionToken string `protobuf:"bytes,1,opt,name=sessionToken" json:"sessionToken,omitempty"`
	ID           string `protobuf:"bytes,2,opt,name=ID,json=iD" json:"ID,omitempty"`
}

func (m *DeleteRoleRequest) Reset()                    { *m = DeleteRoleRequest{} }
func (m *DeleteRoleRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRoleRequest) ProtoMessage()               {}
func (*DeleteRoleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DeleteRoleRequest) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

func (m *DeleteRoleRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

// Message for Update Role request
type UpdateRoleRequest struct {
	SessionToken  string `protobuf:"bytes,1,opt,name=sessionToken" json:"sessionToken,omitempty"`
	Id            string `protobuf:"bytes,2,opt,name=Id,json=id" json:"Id,omitempty"`
	UpdateRequest []byte `protobuf:"bytes,3,opt,name=updateRequest,proto3" json:"updateRequest,omitempty"`
}

func (m *UpdateRoleRequest) Reset()                    { *m = UpdateRoleRequest{} }
func (m *UpdateRoleRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRoleRequest) ProtoMessage()               {}
func (*UpdateRoleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UpdateRoleRequest) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

func (m *UpdateRoleRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateRoleRequest) GetUpdateRequest() []byte {
	if m != nil {
		return m.UpdateRequest
	}
	return nil
}

func init() {
	proto.RegisterType((*RoleRequest)(nil), "RoleRequest")
	proto.RegisterType((*GetRoleRequest)(nil), "GetRoleRequest")
	proto.RegisterType((*RoleResponse)(nil), "RoleResponse")
	proto.RegisterType((*DeleteRoleRequest)(nil), "DeleteRoleRequest")
	proto.RegisterType((*UpdateRoleRequest)(nil), "UpdateRoleRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Roles service

type RolesClient interface {
	CreateRole(ctx context.Context, in *RoleRequest, opts ...grpc.CallOption) (*RoleResponse, error)
	GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*RoleResponse, error)
	GetAllRoles(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*RoleResponse, error)
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*RoleResponse, error)
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*RoleResponse, error)
}

type rolesClient struct {
	cc *grpc.ClientConn
}

func NewRolesClient(cc *grpc.ClientConn) RolesClient {
	return &rolesClient{cc}
}

func (c *rolesClient) CreateRole(ctx context.Context, in *RoleRequest, opts ...grpc.CallOption) (*RoleResponse, error) {
	out := new(RoleResponse)
	err := grpc.Invoke(ctx, "/Roles/CreateRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolesClient) GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*RoleResponse, error) {
	out := new(RoleResponse)
	err := grpc.Invoke(ctx, "/Roles/GetRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolesClient) GetAllRoles(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*RoleResponse, error) {
	out := new(RoleResponse)
	err := grpc.Invoke(ctx, "/Roles/GetAllRoles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolesClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*RoleResponse, error) {
	out := new(RoleResponse)
	err := grpc.Invoke(ctx, "/Roles/DeleteRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rolesClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*RoleResponse, error) {
	out := new(RoleResponse)
	err := grpc.Invoke(ctx, "/Roles/UpdateRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Roles service

type RolesServer interface {
	CreateRole(context.Context, *RoleRequest) (*RoleResponse, error)
	GetRole(context.Context, *GetRoleRequest) (*RoleResponse, error)
	GetAllRoles(context.Context, *GetRoleRequest) (*RoleResponse, error)
	DeleteRole(context.Context, *DeleteRoleRequest) (*RoleResponse, error)
	UpdateRole(context.Context, *UpdateRoleRequest) (*RoleResponse, error)
}

func RegisterRolesServer(s *grpc.Server, srv RolesServer) {
	s.RegisterService(&_Roles_serviceDesc, srv)
}

func _Roles_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolesServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Roles/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolesServer).CreateRole(ctx, req.(*RoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Roles_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolesServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Roles/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolesServer).GetRole(ctx, req.(*GetRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Roles_GetAllRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolesServer).GetAllRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Roles/GetAllRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolesServer).GetAllRoles(ctx, req.(*GetRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Roles_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolesServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Roles/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolesServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Roles_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RolesServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Roles/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RolesServer).UpdateRole(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Roles_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Roles",
	HandlerType: (*RolesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRole",
			Handler:    _Roles_CreateRole_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _Roles_GetRole_Handler,
		},
		{
			MethodName: "GetAllRoles",
			Handler:    _Roles_GetAllRoles_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _Roles_DeleteRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _Roles_UpdateRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "role.proto",
}

func init() { proto.RegisterFile("role.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 356 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xc1, 0x4e, 0xbb, 0x40,
	0x10, 0xc6, 0xff, 0x40, 0xdb, 0x7f, 0x3a, 0xd0, 0x6a, 0x27, 0x1e, 0xb0, 0x07, 0x43, 0x88, 0x87,
	0x26, 0x4d, 0xd6, 0xb4, 0x5e, 0xd4, 0x9b, 0x16, 0x53, 0x3d, 0x78, 0x59, 0xf5, 0x01, 0x68, 0x98,
	0x68, 0x53, 0x64, 0x2b, 0xbb, 0x98, 0xf4, 0x45, 0x7d, 0x16, 0x8f, 0x86, 0x05, 0x2d, 0x04, 0x13,
	0x63, 0x6f, 0xbb, 0x1f, 0x33, 0xdf, 0xc7, 0xfc, 0x32, 0x0b, 0x90, 0x8a, 0x98, 0xd8, 0x3a, 0x15,
	0x4a, 0xf8, 0xf7, 0x60, 0x73, 0x11, 0x13, 0xa7, 0xd7, 0x8c, 0xa4, 0x42, 0x1f, 0x1c, 0x49, 0x52,
	0x2e, 0x45, 0xf2, 0x20, 0x56, 0x94, 0xb8, 0x86, 0x67, 0x8c, 0xba, 0xbc, 0xa6, 0xa1, 0x07, 0x76,
	0x59, 0x7e, 0x25, 0xa2, 0x8d, 0x6b, 0x7a, 0xc6, 0xc8, 0xe1, 0x76, 0xba, 0x95, 0xfc, 0x00, 0xfa,
	0x73, 0x52, 0x7f, 0xf5, 0xed, 0x83, 0x79, 0x1b, 0x69, 0xbb, 0x2e, 0x37, 0x97, 0x91, 0xff, 0x6e,
	0x80, 0x53, 0x78, 0xc8, 0xb5, 0x48, 0x24, 0xe1, 0x11, 0x80, 0x54, 0xa1, 0xca, 0xe4, 0x4c, 0x44,
	0xa4, 0x2d, 0xda, 0xbc, 0xa2, 0xe0, 0x31, 0xf4, 0x8a, 0xdb, 0x1d, 0x49, 0x19, 0x3e, 0x51, 0xe9,
	0x55, 0x17, 0x71, 0x02, 0x9d, 0x67, 0x0a, 0x23, 0x4a, 0x5d, 0xcb, 0xb3, 0x46, 0xf6, 0xf4, 0x90,
	0x55, 0x43, 0xd8, 0x8d, 0xfe, 0x76, 0x9d, 0xa8, 0x74, 0xc3, 0xcb, 0x42, 0x44, 0x68, 0x2d, 0xf2,
	0x51, 0x5b, 0x7a, 0x54, 0x7d, 0x1e, 0x9e, 0x83, 0x5d, 0x29, 0xc5, 0x7d, 0xb0, 0x56, 0xb4, 0x29,
	0xe7, 0xca, 0x8f, 0x78, 0x00, 0xed, 0xb7, 0x30, 0xce, 0xbe, 0xfe, 0xa2, 0xb8, 0x5c, 0x98, 0x67,
	0x86, 0x3f, 0x87, 0x41, 0x40, 0x31, 0x29, 0xda, 0x85, 0x50, 0xf0, 0x4d, 0x28, 0xf0, 0x5f, 0x60,
	0xf0, 0xb8, 0x8e, 0xc2, 0xdd, 0x8c, 0x2a, 0xa8, 0x73, 0x72, 0x59, 0x61, 0x54, 0x98, 0xb8, 0x96,
	0x9e, 0xb4, 0x2e, 0x4e, 0x3f, 0x0c, 0x68, 0xe7, 0x49, 0x12, 0xc7, 0x00, 0xb3, 0x94, 0xca, 0x60,
	0x74, 0x58, 0x25, 0x7f, 0xd8, 0xab, 0xf1, 0xf4, 0xff, 0xe1, 0x18, 0xfe, 0x97, 0xdb, 0x80, 0x7b,
	0xac, 0xbe, 0x17, 0xcd, 0xe2, 0x13, 0xb0, 0xe7, 0xa4, 0x2e, 0xe3, 0xb8, 0x08, 0xfa, 0xbd, 0x61,
	0x02, 0xb0, 0x85, 0x89, 0xc8, 0x1a, 0x64, 0x7f, 0x6c, 0xd9, 0x62, 0x43, 0x64, 0x0d, 0x86, 0x8d,
	0x96, 0x45, 0x47, 0xbf, 0x96, 0xd3, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x10, 0x3a, 0x58, 0xd6,
	0x3b, 0x03, 0x00, 0x00,
}
