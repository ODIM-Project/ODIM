// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: systems.proto

package systems

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Systems service

type SystemsService interface {
	GetSystemsCollection(ctx context.Context, in *GetSystemsRequest, opts ...client.CallOption) (*SystemsResponse, error)
	GetSystemResource(ctx context.Context, in *GetSystemsRequest, opts ...client.CallOption) (*SystemsResponse, error)
	GetSystems(ctx context.Context, in *GetSystemsRequest, opts ...client.CallOption) (*SystemsResponse, error)
	ComputerSystemReset(ctx context.Context, in *ComputerSystemResetRequest, opts ...client.CallOption) (*SystemsResponse, error)
	SetDefaultBootOrder(ctx context.Context, in *DefaultBootOrderRequest, opts ...client.CallOption) (*SystemsResponse, error)
	ChangeBiosSettings(ctx context.Context, in *BiosSettingsRequest, opts ...client.CallOption) (*SystemsResponse, error)
	ChangeBootOrderSettings(ctx context.Context, in *BootOrderSettingsRequest, opts ...client.CallOption) (*SystemsResponse, error)
	CreateVolume(ctx context.Context, in *VolumeRequest, opts ...client.CallOption) (*SystemsResponse, error)
	DeleteVolume(ctx context.Context, in *VolumeRequest, opts ...client.CallOption) (*SystemsResponse, error)
}

type systemsService struct {
	c    client.Client
	name string
}

func NewSystemsService(name string, c client.Client) SystemsService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "systems"
	}
	return &systemsService{
		c:    c,
		name: name,
	}
}

func (c *systemsService) GetSystemsCollection(ctx context.Context, in *GetSystemsRequest, opts ...client.CallOption) (*SystemsResponse, error) {
	req := c.c.NewRequest(c.name, "Systems.GetSystemsCollection", in)
	out := new(SystemsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemsService) GetSystemResource(ctx context.Context, in *GetSystemsRequest, opts ...client.CallOption) (*SystemsResponse, error) {
	req := c.c.NewRequest(c.name, "Systems.GetSystemResource", in)
	out := new(SystemsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemsService) GetSystems(ctx context.Context, in *GetSystemsRequest, opts ...client.CallOption) (*SystemsResponse, error) {
	req := c.c.NewRequest(c.name, "Systems.GetSystems", in)
	out := new(SystemsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemsService) ComputerSystemReset(ctx context.Context, in *ComputerSystemResetRequest, opts ...client.CallOption) (*SystemsResponse, error) {
	req := c.c.NewRequest(c.name, "Systems.ComputerSystemReset", in)
	out := new(SystemsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemsService) SetDefaultBootOrder(ctx context.Context, in *DefaultBootOrderRequest, opts ...client.CallOption) (*SystemsResponse, error) {
	req := c.c.NewRequest(c.name, "Systems.SetDefaultBootOrder", in)
	out := new(SystemsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemsService) ChangeBiosSettings(ctx context.Context, in *BiosSettingsRequest, opts ...client.CallOption) (*SystemsResponse, error) {
	req := c.c.NewRequest(c.name, "Systems.ChangeBiosSettings", in)
	out := new(SystemsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemsService) ChangeBootOrderSettings(ctx context.Context, in *BootOrderSettingsRequest, opts ...client.CallOption) (*SystemsResponse, error) {
	req := c.c.NewRequest(c.name, "Systems.ChangeBootOrderSettings", in)
	out := new(SystemsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemsService) CreateVolume(ctx context.Context, in *VolumeRequest, opts ...client.CallOption) (*SystemsResponse, error) {
	req := c.c.NewRequest(c.name, "Systems.CreateVolume", in)
	out := new(SystemsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemsService) DeleteVolume(ctx context.Context, in *VolumeRequest, opts ...client.CallOption) (*SystemsResponse, error) {
	req := c.c.NewRequest(c.name, "Systems.DeleteVolume", in)
	out := new(SystemsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Systems service

type SystemsHandler interface {
	GetSystemsCollection(context.Context, *GetSystemsRequest, *SystemsResponse) error
	GetSystemResource(context.Context, *GetSystemsRequest, *SystemsResponse) error
	GetSystems(context.Context, *GetSystemsRequest, *SystemsResponse) error
	ComputerSystemReset(context.Context, *ComputerSystemResetRequest, *SystemsResponse) error
	SetDefaultBootOrder(context.Context, *DefaultBootOrderRequest, *SystemsResponse) error
	ChangeBiosSettings(context.Context, *BiosSettingsRequest, *SystemsResponse) error
	ChangeBootOrderSettings(context.Context, *BootOrderSettingsRequest, *SystemsResponse) error
	CreateVolume(context.Context, *VolumeRequest, *SystemsResponse) error
	DeleteVolume(context.Context, *VolumeRequest, *SystemsResponse) error
}

func RegisterSystemsHandler(s server.Server, hdlr SystemsHandler, opts ...server.HandlerOption) error {
	type systems interface {
		GetSystemsCollection(ctx context.Context, in *GetSystemsRequest, out *SystemsResponse) error
		GetSystemResource(ctx context.Context, in *GetSystemsRequest, out *SystemsResponse) error
		GetSystems(ctx context.Context, in *GetSystemsRequest, out *SystemsResponse) error
		ComputerSystemReset(ctx context.Context, in *ComputerSystemResetRequest, out *SystemsResponse) error
		SetDefaultBootOrder(ctx context.Context, in *DefaultBootOrderRequest, out *SystemsResponse) error
		ChangeBiosSettings(ctx context.Context, in *BiosSettingsRequest, out *SystemsResponse) error
		ChangeBootOrderSettings(ctx context.Context, in *BootOrderSettingsRequest, out *SystemsResponse) error
		CreateVolume(ctx context.Context, in *VolumeRequest, out *SystemsResponse) error
		DeleteVolume(ctx context.Context, in *VolumeRequest, out *SystemsResponse) error
	}
	type Systems struct {
		systems
	}
	h := &systemsHandler{hdlr}
	return s.Handle(s.NewHandler(&Systems{h}, opts...))
}

type systemsHandler struct {
	SystemsHandler
}

func (h *systemsHandler) GetSystemsCollection(ctx context.Context, in *GetSystemsRequest, out *SystemsResponse) error {
	return h.SystemsHandler.GetSystemsCollection(ctx, in, out)
}

func (h *systemsHandler) GetSystemResource(ctx context.Context, in *GetSystemsRequest, out *SystemsResponse) error {
	return h.SystemsHandler.GetSystemResource(ctx, in, out)
}

func (h *systemsHandler) GetSystems(ctx context.Context, in *GetSystemsRequest, out *SystemsResponse) error {
	return h.SystemsHandler.GetSystems(ctx, in, out)
}

func (h *systemsHandler) ComputerSystemReset(ctx context.Context, in *ComputerSystemResetRequest, out *SystemsResponse) error {
	return h.SystemsHandler.ComputerSystemReset(ctx, in, out)
}

func (h *systemsHandler) SetDefaultBootOrder(ctx context.Context, in *DefaultBootOrderRequest, out *SystemsResponse) error {
	return h.SystemsHandler.SetDefaultBootOrder(ctx, in, out)
}

func (h *systemsHandler) ChangeBiosSettings(ctx context.Context, in *BiosSettingsRequest, out *SystemsResponse) error {
	return h.SystemsHandler.ChangeBiosSettings(ctx, in, out)
}

func (h *systemsHandler) ChangeBootOrderSettings(ctx context.Context, in *BootOrderSettingsRequest, out *SystemsResponse) error {
	return h.SystemsHandler.ChangeBootOrderSettings(ctx, in, out)
}

func (h *systemsHandler) CreateVolume(ctx context.Context, in *VolumeRequest, out *SystemsResponse) error {
	return h.SystemsHandler.CreateVolume(ctx, in, out)
}

func (h *systemsHandler) DeleteVolume(ctx context.Context, in *VolumeRequest, out *SystemsResponse) error {
	return h.SystemsHandler.DeleteVolume(ctx, in, out)
}
