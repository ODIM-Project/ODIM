// Code generated by protoc-gen-go. DO NOT EDIT.
// source: task.proto

/*
Package task is a generated protocol buffer package.

It is generated from these files:
	task.proto

It has these top-level messages:
	Payload
	GetTaskRequest
	TaskResponse
	CreateTaskRequest
	CreateTaskResponse
	UpdateTaskRequest
	UpdateTaskResponse
*/
package task

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Payload struct {
	HTTPHeaders   map[string]string `protobuf:"bytes,1,rep,name=HTTPHeaders,json=hTTPHeaders" json:"HTTPHeaders,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	HTTPOperation string            `protobuf:"bytes,2,opt,name=HTTPOperation,json=hTTPOperation" json:"HTTPOperation,omitempty"`
	JSONBody      string            `protobuf:"bytes,3,opt,name=JSONBody,json=jSONBody" json:"JSONBody,omitempty"`
	StatusCode    int32             `protobuf:"varint,4,opt,name=StatusCode,json=statusCode" json:"StatusCode,omitempty"`
	TargetURI     string            `protobuf:"bytes,5,opt,name=TargetURI,json=targetURI" json:"TargetURI,omitempty"`
	ResponseBody  []byte            `protobuf:"bytes,6,opt,name=ResponseBody,json=responseBody,proto3" json:"ResponseBody,omitempty"`
}

func (m *Payload) Reset()                    { *m = Payload{} }
func (m *Payload) String() string            { return proto.CompactTextString(m) }
func (*Payload) ProtoMessage()               {}
func (*Payload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Payload) GetHTTPHeaders() map[string]string {
	if m != nil {
		return m.HTTPHeaders
	}
	return nil
}

func (m *Payload) GetHTTPOperation() string {
	if m != nil {
		return m.HTTPOperation
	}
	return ""
}

func (m *Payload) GetJSONBody() string {
	if m != nil {
		return m.JSONBody
	}
	return ""
}

func (m *Payload) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *Payload) GetTargetURI() string {
	if m != nil {
		return m.TargetURI
	}
	return ""
}

func (m *Payload) GetResponseBody() []byte {
	if m != nil {
		return m.ResponseBody
	}
	return nil
}

type GetTaskRequest struct {
	TaskID       string `protobuf:"bytes,1,opt,name=taskID" json:"taskID,omitempty"`
	SubTaskID    string `protobuf:"bytes,2,opt,name=subTaskID" json:"subTaskID,omitempty"`
	SessionToken string `protobuf:"bytes,3,opt,name=sessionToken" json:"sessionToken,omitempty"`
}

func (m *GetTaskRequest) Reset()                    { *m = GetTaskRequest{} }
func (m *GetTaskRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTaskRequest) ProtoMessage()               {}
func (*GetTaskRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetTaskRequest) GetTaskID() string {
	if m != nil {
		return m.TaskID
	}
	return ""
}

func (m *GetTaskRequest) GetSubTaskID() string {
	if m != nil {
		return m.SubTaskID
	}
	return ""
}

func (m *GetTaskRequest) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

type TaskResponse struct {
	StatusCode    int32             `protobuf:"varint,1,opt,name=statusCode" json:"statusCode,omitempty"`
	StatusMessage string            `protobuf:"bytes,2,opt,name=statusMessage" json:"statusMessage,omitempty"`
	Header        map[string]string `protobuf:"bytes,3,rep,name=header" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Body          []byte            `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *TaskResponse) Reset()                    { *m = TaskResponse{} }
func (m *TaskResponse) String() string            { return proto.CompactTextString(m) }
func (*TaskResponse) ProtoMessage()               {}
func (*TaskResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TaskResponse) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *TaskResponse) GetStatusMessage() string {
	if m != nil {
		return m.StatusMessage
	}
	return ""
}

func (m *TaskResponse) GetHeader() map[string]string {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TaskResponse) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type CreateTaskRequest struct {
	UserName     string `protobuf:"bytes,1,opt,name=userName" json:"userName,omitempty"`
	ParentTaskID string `protobuf:"bytes,2,opt,name=parentTaskID" json:"parentTaskID,omitempty"`
}

func (m *CreateTaskRequest) Reset()                    { *m = CreateTaskRequest{} }
func (m *CreateTaskRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateTaskRequest) ProtoMessage()               {}
func (*CreateTaskRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CreateTaskRequest) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

func (m *CreateTaskRequest) GetParentTaskID() string {
	if m != nil {
		return m.ParentTaskID
	}
	return ""
}

type CreateTaskResponse struct {
	TaskURI string `protobuf:"bytes,1,opt,name=taskURI" json:"taskURI,omitempty"`
}

func (m *CreateTaskResponse) Reset()                    { *m = CreateTaskResponse{} }
func (m *CreateTaskResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateTaskResponse) ProtoMessage()               {}
func (*CreateTaskResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CreateTaskResponse) GetTaskURI() string {
	if m != nil {
		return m.TaskURI
	}
	return ""
}

type UpdateTaskRequest struct {
	TaskID          string                     `protobuf:"bytes,1,opt,name=taskID" json:"taskID,omitempty"`
	TaskState       string                     `protobuf:"bytes,2,opt,name=taskState" json:"taskState,omitempty"`
	TaskStatus      string                     `protobuf:"bytes,3,opt,name=taskStatus" json:"taskStatus,omitempty"`
	PercentComplete int32                      `protobuf:"varint,4,opt,name=percentComplete" json:"percentComplete,omitempty"`
	PayLoad         *Payload                   `protobuf:"bytes,5,opt,name=payLoad" json:"payLoad,omitempty"`
	EndTime         *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=endTime" json:"endTime,omitempty"`
}

func (m *UpdateTaskRequest) Reset()                    { *m = UpdateTaskRequest{} }
func (m *UpdateTaskRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateTaskRequest) ProtoMessage()               {}
func (*UpdateTaskRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UpdateTaskRequest) GetTaskID() string {
	if m != nil {
		return m.TaskID
	}
	return ""
}

func (m *UpdateTaskRequest) GetTaskState() string {
	if m != nil {
		return m.TaskState
	}
	return ""
}

func (m *UpdateTaskRequest) GetTaskStatus() string {
	if m != nil {
		return m.TaskStatus
	}
	return ""
}

func (m *UpdateTaskRequest) GetPercentComplete() int32 {
	if m != nil {
		return m.PercentComplete
	}
	return 0
}

func (m *UpdateTaskRequest) GetPayLoad() *Payload {
	if m != nil {
		return m.PayLoad
	}
	return nil
}

func (m *UpdateTaskRequest) GetEndTime() *google_protobuf.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

type UpdateTaskResponse struct {
	StatusMessage string `protobuf:"bytes,1,opt,name=statusMessage" json:"statusMessage,omitempty"`
}

func (m *UpdateTaskResponse) Reset()                    { *m = UpdateTaskResponse{} }
func (m *UpdateTaskResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateTaskResponse) ProtoMessage()               {}
func (*UpdateTaskResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *UpdateTaskResponse) GetStatusMessage() string {
	if m != nil {
		return m.StatusMessage
	}
	return ""
}

func init() {
	proto.RegisterType((*Payload)(nil), "Payload")
	proto.RegisterType((*GetTaskRequest)(nil), "GetTaskRequest")
	proto.RegisterType((*TaskResponse)(nil), "TaskResponse")
	proto.RegisterType((*CreateTaskRequest)(nil), "CreateTaskRequest")
	proto.RegisterType((*CreateTaskResponse)(nil), "CreateTaskResponse")
	proto.RegisterType((*UpdateTaskRequest)(nil), "UpdateTaskRequest")
	proto.RegisterType((*UpdateTaskResponse)(nil), "UpdateTaskResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GetTaskService service

type GetTaskServiceClient interface {
	DeleteTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*TaskResponse, error)
	GetTasks(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*TaskResponse, error)
	GetSubTasks(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*TaskResponse, error)
	GetSubTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*TaskResponse, error)
	TaskCollection(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*TaskResponse, error)
	GetTaskService(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*TaskResponse, error)
	GetTaskMonitor(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*TaskResponse, error)
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error)
	CreateChildTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error)
	UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*UpdateTaskResponse, error)
}

type getTaskServiceClient struct {
	cc *grpc.ClientConn
}

func NewGetTaskServiceClient(cc *grpc.ClientConn) GetTaskServiceClient {
	return &getTaskServiceClient{cc}
}

func (c *getTaskServiceClient) DeleteTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*TaskResponse, error) {
	out := new(TaskResponse)
	err := grpc.Invoke(ctx, "/GetTaskService/DeleteTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getTaskServiceClient) GetTasks(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*TaskResponse, error) {
	out := new(TaskResponse)
	err := grpc.Invoke(ctx, "/GetTaskService/GetTasks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getTaskServiceClient) GetSubTasks(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*TaskResponse, error) {
	out := new(TaskResponse)
	err := grpc.Invoke(ctx, "/GetTaskService/GetSubTasks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getTaskServiceClient) GetSubTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*TaskResponse, error) {
	out := new(TaskResponse)
	err := grpc.Invoke(ctx, "/GetTaskService/GetSubTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getTaskServiceClient) TaskCollection(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*TaskResponse, error) {
	out := new(TaskResponse)
	err := grpc.Invoke(ctx, "/GetTaskService/TaskCollection", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getTaskServiceClient) GetTaskService(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*TaskResponse, error) {
	out := new(TaskResponse)
	err := grpc.Invoke(ctx, "/GetTaskService/GetTaskService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getTaskServiceClient) GetTaskMonitor(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*TaskResponse, error) {
	out := new(TaskResponse)
	err := grpc.Invoke(ctx, "/GetTaskService/GetTaskMonitor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getTaskServiceClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error) {
	out := new(CreateTaskResponse)
	err := grpc.Invoke(ctx, "/GetTaskService/CreateTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getTaskServiceClient) CreateChildTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error) {
	out := new(CreateTaskResponse)
	err := grpc.Invoke(ctx, "/GetTaskService/CreateChildTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getTaskServiceClient) UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*UpdateTaskResponse, error) {
	out := new(UpdateTaskResponse)
	err := grpc.Invoke(ctx, "/GetTaskService/UpdateTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GetTaskService service

type GetTaskServiceServer interface {
	DeleteTask(context.Context, *GetTaskRequest) (*TaskResponse, error)
	GetTasks(context.Context, *GetTaskRequest) (*TaskResponse, error)
	GetSubTasks(context.Context, *GetTaskRequest) (*TaskResponse, error)
	GetSubTask(context.Context, *GetTaskRequest) (*TaskResponse, error)
	TaskCollection(context.Context, *GetTaskRequest) (*TaskResponse, error)
	GetTaskService(context.Context, *GetTaskRequest) (*TaskResponse, error)
	GetTaskMonitor(context.Context, *GetTaskRequest) (*TaskResponse, error)
	CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error)
	CreateChildTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error)
	UpdateTask(context.Context, *UpdateTaskRequest) (*UpdateTaskResponse, error)
}

func RegisterGetTaskServiceServer(s *grpc.Server, srv GetTaskServiceServer) {
	s.RegisterService(&_GetTaskService_serviceDesc, srv)
}

func _GetTaskService_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetTaskServiceServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GetTaskService/DeleteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetTaskServiceServer).DeleteTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GetTaskService_GetTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetTaskServiceServer).GetTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GetTaskService/GetTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetTaskServiceServer).GetTasks(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GetTaskService_GetSubTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetTaskServiceServer).GetSubTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GetTaskService/GetSubTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetTaskServiceServer).GetSubTasks(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GetTaskService_GetSubTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetTaskServiceServer).GetSubTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GetTaskService/GetSubTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetTaskServiceServer).GetSubTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GetTaskService_TaskCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetTaskServiceServer).TaskCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GetTaskService/TaskCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetTaskServiceServer).TaskCollection(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GetTaskService_GetTaskService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetTaskServiceServer).GetTaskService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GetTaskService/GetTaskService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetTaskServiceServer).GetTaskService(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GetTaskService_GetTaskMonitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetTaskServiceServer).GetTaskMonitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GetTaskService/GetTaskMonitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetTaskServiceServer).GetTaskMonitor(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GetTaskService_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetTaskServiceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GetTaskService/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetTaskServiceServer).CreateTask(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GetTaskService_CreateChildTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetTaskServiceServer).CreateChildTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GetTaskService/CreateChildTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetTaskServiceServer).CreateChildTask(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GetTaskService_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetTaskServiceServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GetTaskService/UpdateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetTaskServiceServer).UpdateTask(ctx, req.(*UpdateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GetTaskService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "GetTaskService",
	HandlerType: (*GetTaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteTask",
			Handler:    _GetTaskService_DeleteTask_Handler,
		},
		{
			MethodName: "GetTasks",
			Handler:    _GetTaskService_GetTasks_Handler,
		},
		{
			MethodName: "GetSubTasks",
			Handler:    _GetTaskService_GetSubTasks_Handler,
		},
		{
			MethodName: "GetSubTask",
			Handler:    _GetTaskService_GetSubTask_Handler,
		},
		{
			MethodName: "TaskCollection",
			Handler:    _GetTaskService_TaskCollection_Handler,
		},
		{
			MethodName: "GetTaskService",
			Handler:    _GetTaskService_GetTaskService_Handler,
		},
		{
			MethodName: "GetTaskMonitor",
			Handler:    _GetTaskService_GetTaskMonitor_Handler,
		},
		{
			MethodName: "CreateTask",
			Handler:    _GetTaskService_CreateTask_Handler,
		},
		{
			MethodName: "CreateChildTask",
			Handler:    _GetTaskService_CreateChildTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _GetTaskService_UpdateTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task.proto",
}

func init() { proto.RegisterFile("task.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 661 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xdb, 0x6e, 0xd3, 0x40,
	0x10, 0xad, 0x9b, 0x34, 0x49, 0xc7, 0x49, 0x2f, 0x5b, 0x84, 0x8c, 0x85, 0x20, 0xb2, 0xfa, 0x90,
	0x07, 0xb4, 0x15, 0x01, 0xa9, 0x50, 0x10, 0x0f, 0xa4, 0xa8, 0x2d, 0xa2, 0x17, 0x39, 0xee, 0x07,
	0x6c, 0xea, 0x21, 0x71, 0xe3, 0x78, 0x8d, 0x77, 0x5d, 0x29, 0xdf, 0xc2, 0x1f, 0xf0, 0x41, 0xfc,
	0x05, 0xff, 0x80, 0xd6, 0x97, 0xda, 0x4e, 0x10, 0x4a, 0xde, 0x3c, 0x67, 0xcf, 0xcc, 0xee, 0x9c,
	0x39, 0x63, 0x00, 0xc9, 0xc4, 0x94, 0x86, 0x11, 0x97, 0xdc, 0x7c, 0x39, 0xe6, 0x7c, 0xec, 0xe3,
	0x51, 0x12, 0x8d, 0xe2, 0xef, 0x47, 0xd2, 0x9b, 0xa1, 0x90, 0x6c, 0x16, 0xa6, 0x04, 0xeb, 0xd7,
	0x26, 0x34, 0x6f, 0xd8, 0xdc, 0xe7, 0xcc, 0x25, 0x1f, 0x40, 0x3f, 0x77, 0x9c, 0x9b, 0x73, 0x64,
	0x2e, 0x46, 0xc2, 0xd0, 0xba, 0xb5, 0x9e, 0xde, 0x7f, 0x46, 0xb3, 0x63, 0x5a, 0x3a, 0xfb, 0x12,
	0xc8, 0x68, 0x6e, 0xeb, 0x93, 0x02, 0x21, 0x87, 0xd0, 0x51, 0x84, 0xeb, 0x10, 0x23, 0x26, 0x3d,
	0x1e, 0x18, 0x9b, 0x5d, 0xad, 0xb7, 0x6d, 0x77, 0x26, 0x65, 0x90, 0x98, 0xd0, 0xfa, 0x3a, 0xbc,
	0xbe, 0xfa, 0xcc, 0xdd, 0xb9, 0x51, 0x4b, 0x08, 0xad, 0xfb, 0x2c, 0x26, 0x2f, 0x00, 0x86, 0x92,
	0xc9, 0x58, 0x0c, 0xb8, 0x8b, 0x46, 0xbd, 0xab, 0xf5, 0xb6, 0x6c, 0x10, 0x8f, 0x08, 0x79, 0x0e,
	0xdb, 0x0e, 0x8b, 0xc6, 0x28, 0x6f, 0xed, 0x0b, 0x63, 0x2b, 0x49, 0xde, 0x96, 0x39, 0x40, 0x2c,
	0x68, 0xdb, 0x28, 0x42, 0x1e, 0x08, 0x4c, 0xaa, 0x37, 0xba, 0x5a, 0xaf, 0x6d, 0xb7, 0xa3, 0x12,
	0x66, 0x7e, 0x82, 0xbd, 0xc5, 0x26, 0xc8, 0x1e, 0xd4, 0xa6, 0x38, 0x37, 0xb4, 0xa4, 0x9e, 0xfa,
	0x24, 0x4f, 0x60, 0xeb, 0x81, 0xf9, 0x31, 0x66, 0x1d, 0xa4, 0xc1, 0xc9, 0xe6, 0x3b, 0xcd, 0xba,
	0x87, 0x9d, 0x33, 0x94, 0x0e, 0x13, 0x53, 0x1b, 0x7f, 0xc4, 0x28, 0x24, 0x79, 0x0a, 0x0d, 0xa5,
	0xf6, 0xc5, 0x69, 0x56, 0x20, 0x8b, 0xd4, 0x5b, 0x45, 0x3c, 0x72, 0xd2, 0xa3, 0xb4, 0x4e, 0x01,
	0xa8, 0xb7, 0x0a, 0x14, 0xc2, 0xe3, 0x81, 0xc3, 0xa7, 0x18, 0x64, 0x4a, 0x54, 0x30, 0xeb, 0xb7,
	0x06, 0xed, 0xf4, 0xa6, 0xb4, 0x01, 0x25, 0x4f, 0x21, 0x46, 0x72, 0x5d, 0x55, 0x9e, 0x43, 0xe8,
	0xa4, 0xd1, 0x25, 0x0a, 0xc1, 0xc6, 0xf9, 0xf3, 0xab, 0x20, 0x79, 0x0d, 0x8d, 0x49, 0xd2, 0xbe,
	0x51, 0xcb, 0xc6, 0x5b, 0xbe, 0x84, 0xa6, 0xd2, 0xa4, 0xe3, 0xcd, 0x88, 0x84, 0x40, 0x7d, 0xa4,
	0x14, 0xad, 0x27, 0x8a, 0x26, 0xdf, 0xe6, 0x7b, 0xd0, 0x4b, 0xd4, 0xb5, 0x44, 0x1c, 0xc2, 0xfe,
	0x20, 0x42, 0x26, 0xb1, 0xac, 0xa3, 0x09, 0xad, 0x58, 0x60, 0x74, 0xc5, 0x66, 0x98, 0x55, 0x79,
	0x8c, 0x95, 0x5a, 0x21, 0x8b, 0x30, 0x90, 0x15, 0x39, 0x2b, 0x98, 0x45, 0x81, 0x94, 0x8b, 0x66,
	0x92, 0x19, 0xd0, 0x54, 0xf3, 0x50, 0x7e, 0x49, 0x8b, 0xe6, 0xa1, 0xf5, 0x47, 0x83, 0xfd, 0xdb,
	0xd0, 0x5d, 0x78, 0xc5, 0x7f, 0xa6, 0xa9, 0xbe, 0x94, 0x3b, 0xf3, 0x86, 0x0a, 0x40, 0x0d, 0x26,
	0x0f, 0x62, 0x91, 0xcd, 0xb2, 0x84, 0x90, 0x1e, 0xec, 0x86, 0x18, 0xdd, 0x61, 0x20, 0x07, 0x7c,
	0x16, 0xfa, 0x28, 0x73, 0x73, 0x2f, 0xc2, 0xc4, 0x82, 0x66, 0xc8, 0xe6, 0xdf, 0x38, 0x73, 0x13,
	0x7f, 0xeb, 0xfd, 0x56, 0xbe, 0x7c, 0x76, 0x7e, 0x40, 0xde, 0x42, 0x13, 0x03, 0xd7, 0xf1, 0x66,
	0x98, 0x58, 0x5c, 0xef, 0x9b, 0x34, 0xdd, 0x71, 0x9a, 0xef, 0x38, 0x75, 0xf2, 0x1d, 0xb7, 0x73,
	0xaa, 0x75, 0x02, 0xa4, 0xdc, 0x6e, 0xa6, 0xcf, 0x92, 0x65, 0xb4, 0x7f, 0x58, 0xa6, 0xff, 0xb3,
	0xfe, 0x68, 0xfb, 0x21, 0x46, 0x0f, 0xde, 0x1d, 0x12, 0x0a, 0x70, 0x8a, 0xea, 0xc9, 0x0a, 0x24,
	0xbb, 0xb4, 0xba, 0x15, 0x66, 0xa7, 0x62, 0x2a, 0x6b, 0x83, 0xbc, 0x82, 0x56, 0x46, 0x11, 0x2b,
	0xb0, 0x8f, 0x40, 0x3f, 0x43, 0x39, 0x4c, 0xd7, 0x65, 0x95, 0x04, 0x0a, 0x50, 0x24, 0xac, 0xc0,
	0xef, 0xc3, 0x8e, 0x42, 0x06, 0xdc, 0xf7, 0xf1, 0x2e, 0xf9, 0x2f, 0xad, 0x94, 0xb3, 0x20, 0xc2,
	0x3a, 0x39, 0x97, 0x3c, 0xf0, 0x24, 0x8f, 0x56, 0xc8, 0x39, 0x06, 0x28, 0x9c, 0x4c, 0x08, 0x5d,
	0xda, 0x15, 0xf3, 0x80, 0x2e, 0x5b, 0xdd, 0xda, 0x20, 0x1f, 0x61, 0x37, 0xc5, 0x07, 0x13, 0xcf,
	0x77, 0xd7, 0xcd, 0x3e, 0x06, 0x28, 0x0c, 0x42, 0x08, 0x5d, 0x5a, 0x0e, 0xf3, 0x80, 0x2e, 0x3b,
	0xc8, 0xda, 0x18, 0x35, 0x12, 0xdb, 0xbd, 0xf9, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x08, 0x3a, 0xbb,
	0x50, 0x76, 0x06, 0x00, 0x00,
}
