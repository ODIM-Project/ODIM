---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka1
  namespace: {{ .Values.odimra.namespace }}
  labels:
    app: odim-ra
    unit: kafka
    instance: kafka1
  annotations:
    secret.reloader.stakater.com/reload: "kafka-secret"
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: odim-ra
        unit: kafka
        instance: kafka1
        parentdeployment: odim-kafka
    spec:
      hostname: kafka1
      subdomain: kafka
      initContainers:
        - name: init-kafka1
          image: busybox:1.33
          command: ['sh', '-c', 'sleep 3']
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
                - key: "unit"
                  operator: In
                  values: 
                  - kafka
            topologyKey: "kubernetes.io/hostname"
      containers:
        - name: kafka1
          image: kafka:{{ .Values.odimra.kafkaImageTag }}
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9092
            - containerPort: 9093
          env:
            - name: IS_KAFKA_CLUSTER
              value: 'true'
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "zookeeper1.zookeeper.{{ .Values.odimra.namespace }}.svc.cluster.local:2181,\
		      zookeeper2.zookeeper.{{ .Values.odimra.namespace }}.svc.cluster.local:2181,\
		      zookeeper3.zookeeper.{{ .Values.odimra.namespace }}.svc.cluster.local:2181"
            - name: KAFKA_LISTENERS
              value: SSL://:9092,EXTERNAL://:9093
            - name: KAFKA_ADV_LISTENERS
              value: "SSL://kafka1.kafka.{{ .Values.odimra.namespace }}.svc.cluster.local:9092,\
		      EXTERNAL://kafka1-ext:{{ .Values.odimra.kafkaNodePort }}"
            - name: KAFKA_KEYSTORE_PATH
              value: /opt/kafka/conf/kafka.keystore.jks
            - name: KAFKA_TRUSTSTORE_PATH
              value: /opt/kafka/conf/kafka.truststore.jks
            - name: KAFKA_KEYSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: kafka-secret
                  key: jkskey
            - name: KAFKA_TRUSTSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: kafka-secret
                  key: jkskey
            - name: KAFKA_LOG_DIRS
              value: /opt/kafka/data
            - name: KAFKA_CLIENT_AUTH
              value: none
          volumeMounts:
            - mountPath: /opt/kafka/conf
              name: kafka-conf-pv
            - mountPath: /opt/kafka/data
              name: kafka-data-pv
      volumes:
        - name: kafka-conf-pv
          persistentVolumeClaim:
            claimName: kafka-conf-pvc
        - name: kafka-data-pv
          persistentVolumeClaim:
            claimName: kafka-data-pvc
  selector:
    matchLabels:
      app: odim-ra
      unit: kafka
      instance: kafka1
      parentdeployment: odim-kafka
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka2
  namespace: {{ .Values.odimra.namespace }}
  labels:
    app: odim-ra
    unit: kafka
    instance: kafka2
  annotations:
    secret.reloader.stakater.com/reload: "kafka-secret"
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: odim-ra
        unit: kafka
        instance: kafka2
        parentdeployment: odim-kafka
    spec:
      hostname: kafka2
      subdomain: kafka
      initContainers:
        - name: init-kafka2
          image: busybox:1.33
          command: ['sh', '-c', 'sleep 5']
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
                - key: "unit"
                  operator: In
                  values:
                  - kafka
            topologyKey: "kubernetes.io/hostname"
      containers:
        - name: kafka2
          image: kafka:{{ .Values.odimra.kafkaImageTag }}
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9092
            - containerPort: 9093
          env:
            - name: IS_KAFKA_CLUSTER
              value: 'true'
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "zookeeper1.zookeeper.{{ .Values.odimra.namespace }}.svc.cluster.local:2181,\
		      zookeeper2.zookeeper.{{ .Values.odimra.namespace }}.svc.cluster.local:2181,\
		      zookeeper3.zookeeper.{{ .Values.odimra.namespace }}.svc.cluster.local:2181"
            - name: KAFKA_LISTENERS
              value: SSL://:9092,EXTERNAL://:9093
            - name: KAFKA_ADV_LISTENERS
              value: "SSL://kafka2.kafka.{{ .Values.odimra.namespace }}.svc.cluster.local:9092,\
		      EXTERNAL://kafka2-ext:{{ add .Values.odimra.kafkaNodePort 1 }}"
            - name: KAFKA_KEYSTORE_PATH
              value: /opt/kafka/conf/kafka.keystore.jks
            - name: KAFKA_TRUSTSTORE_PATH
              value: /opt/kafka/conf/kafka.truststore.jks
            - name: KAFKA_KEYSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: kafka-secret
                  key: jkskey
            - name: KAFKA_TRUSTSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: kafka-secret
                  key: jkskey
            - name: KAFKA_LOG_DIRS
              value: /opt/kafka/data
            - name: KAFKA_CLIENT_AUTH
              value: none
          volumeMounts:
            - mountPath: /opt/kafka/conf
              name: kafka-conf-pv
            - mountPath: /opt/kafka/data
              name: kafka-data-pv
      volumes:
        - name: kafka-conf-pv
          persistentVolumeClaim:
            claimName: kafka-conf-pvc
        - name: kafka-data-pv
          persistentVolumeClaim:
            claimName: kafka-data-pvc
  selector:
    matchLabels:
      app: odim-ra
      unit: kafka
      instance: kafka2
      parentdeployment: odim-kafka
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka3
  namespace: {{ .Values.odimra.namespace }}
  labels:
    app: odim-ra
    unit: kafka
    instance: kafka3
  annotations:
    secret.reloader.stakater.com/reload: "kafka-secret"
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: odim-ra
        unit: kafka
        instance: kafka3
        parentdeployment: odim-kafka
    spec:
      hostname: kafka3
      subdomain: kafka
      initContainers:
        - name: init-kafka3
          image: busybox:1.33
          command: ['sh', '-c', 'sleep 7']
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
                - key: "unit"
                  operator: In
                  values:
                  - kafka
            topologyKey: "kubernetes.io/hostname"
      containers:
        - name: kafka3
          image: kafka:{{ .Values.odimra.kafkaImageTag }}
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9092
            - containerPort: 9093
          env:
            - name: IS_KAFKA_CLUSTER
              value: 'true'
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "zookeeper1.zookeeper.{{ .Values.odimra.namespace }}.svc.cluster.local:2181,\
		      zookeeper2.zookeeper.{{ .Values.odimra.namespace }}.svc.cluster.local:2181,\
		      zookeeper3.zookeeper.{{ .Values.odimra.namespace }}.svc.cluster.local:2181"
            - name: KAFKA_LISTENERS
              value: SSL://:9092,EXTERNAL://:9093
            - name: KAFKA_ADV_LISTENERS
              value: SSL://kafka3:9092,EXTERNAL://kafka3-ext:30094
              value: "SSL://kafka3.kafka.{{ .Values.odimra.namespace }}.svc.cluster.local:9092,\
		      EXTERNAL://kafka3-ext:{{ add .Values.odimra.kafkaNodePort 2 }}"
            - name: KAFKA_KEYSTORE_PATH
              value: /opt/kafka/conf/kafka.keystore.jks
            - name: KAFKA_TRUSTSTORE_PATH
              value: /opt/kafka/conf/kafka.truststore.jks
            - name: KAFKA_KEYSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: kafka-secret
                  key: jkskey
            - name: KAFKA_TRUSTSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: kafka-secret
                  key: jkskey
            - name: KAFKA_LOG_DIRS
              value: /opt/kafka/data
            - name: KAFKA_CLIENT_AUTH
              value: none
          volumeMounts:
            - mountPath: /opt/kafka/conf
              name: kafka-conf-pv
            - mountPath: /opt/kafka/data
              name: kafka-data-pv
      volumes:
        - name: kafka-conf-pv
          persistentVolumeClaim:
            claimName: kafka-conf-pvc
        - name: kafka-data-pv
          persistentVolumeClaim:
            claimName: kafka-data-pvc
  selector:
    matchLabels:
      app: odim-ra
      unit: kafka
      instance: kafka3
      parentdeployment: odim-kafka
