# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import proto.composition_service_pb2 as composition__service__pb2


class CompositionStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCompositionService = channel.unary_unary(
                '/Composition/GetCompositionService',
                request_serializer=composition__service__pb2.GetCompositionServiceRequest.SerializeToString,
                response_deserializer=composition__service__pb2.CompositionServiceResponse.FromString,
                )
        self.GetCompositionResource = channel.unary_unary(
                '/Composition/GetCompositionResource',
                request_serializer=composition__service__pb2.GetCompositionResourceRequest.SerializeToString,
                response_deserializer=composition__service__pb2.CompositionServiceResponse.FromString,
                )
        self.CreateCompositionResource = channel.unary_unary(
                '/Composition/CreateCompositionResource',
                request_serializer=composition__service__pb2.CreateCompositionResourceRequest.SerializeToString,
                response_deserializer=composition__service__pb2.CompositionServiceResponse.FromString,
                )
        self.DeleteCompositionResource = channel.unary_unary(
                '/Composition/DeleteCompositionResource',
                request_serializer=composition__service__pb2.DeleteCompositionResourceRequest.SerializeToString,
                response_deserializer=composition__service__pb2.CompositionServiceResponse.FromString,
                )
        self.Compose = channel.unary_unary(
                '/Composition/Compose',
                request_serializer=composition__service__pb2.ComposeRequest.SerializeToString,
                response_deserializer=composition__service__pb2.CompositionServiceResponse.FromString,
                )


class CompositionServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetCompositionService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCompositionResource(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateCompositionResource(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCompositionResource(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Compose(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CompositionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCompositionService': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCompositionService,
                    request_deserializer=composition__service__pb2.GetCompositionServiceRequest.FromString,
                    response_serializer=composition__service__pb2.CompositionServiceResponse.SerializeToString,
            ),
            'GetCompositionResource': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCompositionResource,
                    request_deserializer=composition__service__pb2.GetCompositionResourceRequest.FromString,
                    response_serializer=composition__service__pb2.CompositionServiceResponse.SerializeToString,
            ),
            'CreateCompositionResource': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCompositionResource,
                    request_deserializer=composition__service__pb2.CreateCompositionResourceRequest.FromString,
                    response_serializer=composition__service__pb2.CompositionServiceResponse.SerializeToString,
            ),
            'DeleteCompositionResource': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCompositionResource,
                    request_deserializer=composition__service__pb2.DeleteCompositionResourceRequest.FromString,
                    response_serializer=composition__service__pb2.CompositionServiceResponse.SerializeToString,
            ),
            'Compose': grpc.unary_unary_rpc_method_handler(
                    servicer.Compose,
                    request_deserializer=composition__service__pb2.ComposeRequest.FromString,
                    response_serializer=composition__service__pb2.CompositionServiceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Composition', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Composition(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetCompositionService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Composition/GetCompositionService',
            composition__service__pb2.GetCompositionServiceRequest.SerializeToString,
            composition__service__pb2.CompositionServiceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCompositionResource(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Composition/GetCompositionResource',
            composition__service__pb2.GetCompositionResourceRequest.SerializeToString,
            composition__service__pb2.CompositionServiceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateCompositionResource(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Composition/CreateCompositionResource',
            composition__service__pb2.CreateCompositionResourceRequest.SerializeToString,
            composition__service__pb2.CompositionServiceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteCompositionResource(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Composition/DeleteCompositionResource',
            composition__service__pb2.DeleteCompositionResourceRequest.SerializeToString,
            composition__service__pb2.CompositionServiceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Compose(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Composition/Compose',
            composition__service__pb2.ComposeRequest.SerializeToString,
            composition__service__pb2.CompositionServiceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
