// Code generated by protoc-gen-go. DO NOT EDIT.
// source: systems.proto

/*
Package systems is a generated protocol buffer package.

It is generated from these files:
	systems.proto

It has these top-level messages:
	GetSystemsRequest
	SystemsResponse
	ComputerSystemResetRequest
	DefaultBootOrderRequest
	BiosSettingsRequest
	BootOrderSettingsRequest
	VolumeRequest
*/
package systems

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetSystemsRequest struct {
	SessionToken string `protobuf:"bytes,1,opt,name=sessionToken" json:"sessionToken,omitempty"`
	RequestParam string `protobuf:"bytes,2,opt,name=requestParam" json:"requestParam,omitempty"`
	URL          string `protobuf:"bytes,3,opt,name=URL,json=uRL" json:"URL,omitempty"`
	ResourceID   string `protobuf:"bytes,4,opt,name=resourceID" json:"resourceID,omitempty"`
}

func (m *GetSystemsRequest) Reset()                    { *m = GetSystemsRequest{} }
func (m *GetSystemsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSystemsRequest) ProtoMessage()               {}
func (*GetSystemsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetSystemsRequest) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

func (m *GetSystemsRequest) GetRequestParam() string {
	if m != nil {
		return m.RequestParam
	}
	return ""
}

func (m *GetSystemsRequest) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

func (m *GetSystemsRequest) GetResourceID() string {
	if m != nil {
		return m.ResourceID
	}
	return ""
}

type SystemsResponse struct {
	StatusCode    int32             `protobuf:"varint,1,opt,name=statusCode" json:"statusCode,omitempty"`
	StatusMessage string            `protobuf:"bytes,2,opt,name=statusMessage" json:"statusMessage,omitempty"`
	Header        map[string]string `protobuf:"bytes,3,rep,name=header" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Body          []byte            `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *SystemsResponse) Reset()                    { *m = SystemsResponse{} }
func (m *SystemsResponse) String() string            { return proto.CompactTextString(m) }
func (*SystemsResponse) ProtoMessage()               {}
func (*SystemsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SystemsResponse) GetStatusCode() int32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *SystemsResponse) GetStatusMessage() string {
	if m != nil {
		return m.StatusMessage
	}
	return ""
}

func (m *SystemsResponse) GetHeader() map[string]string {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SystemsResponse) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type ComputerSystemResetRequest struct {
	SessionToken string `protobuf:"bytes,1,opt,name=sessionToken" json:"sessionToken,omitempty"`
	SystemID     string `protobuf:"bytes,2,opt,name=SystemID,json=systemID" json:"SystemID,omitempty"`
	RequestBody  []byte `protobuf:"bytes,3,opt,name=RequestBody,json=requestBody,proto3" json:"RequestBody,omitempty"`
}

func (m *ComputerSystemResetRequest) Reset()                    { *m = ComputerSystemResetRequest{} }
func (m *ComputerSystemResetRequest) String() string            { return proto.CompactTextString(m) }
func (*ComputerSystemResetRequest) ProtoMessage()               {}
func (*ComputerSystemResetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ComputerSystemResetRequest) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

func (m *ComputerSystemResetRequest) GetSystemID() string {
	if m != nil {
		return m.SystemID
	}
	return ""
}

func (m *ComputerSystemResetRequest) GetRequestBody() []byte {
	if m != nil {
		return m.RequestBody
	}
	return nil
}

type DefaultBootOrderRequest struct {
	SessionToken string `protobuf:"bytes,1,opt,name=sessionToken" json:"sessionToken,omitempty"`
	SystemID     string `protobuf:"bytes,2,opt,name=SystemID,json=systemID" json:"SystemID,omitempty"`
}

func (m *DefaultBootOrderRequest) Reset()                    { *m = DefaultBootOrderRequest{} }
func (m *DefaultBootOrderRequest) String() string            { return proto.CompactTextString(m) }
func (*DefaultBootOrderRequest) ProtoMessage()               {}
func (*DefaultBootOrderRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DefaultBootOrderRequest) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

func (m *DefaultBootOrderRequest) GetSystemID() string {
	if m != nil {
		return m.SystemID
	}
	return ""
}

type BiosSettingsRequest struct {
	SessionToken string `protobuf:"bytes,1,opt,name=SessionToken,json=sessionToken" json:"SessionToken,omitempty"`
	SystemID     string `protobuf:"bytes,2,opt,name=SystemID,json=systemID" json:"SystemID,omitempty"`
	RequestBody  []byte `protobuf:"bytes,3,opt,name=RequestBody,json=requestBody,proto3" json:"RequestBody,omitempty"`
}

func (m *BiosSettingsRequest) Reset()                    { *m = BiosSettingsRequest{} }
func (m *BiosSettingsRequest) String() string            { return proto.CompactTextString(m) }
func (*BiosSettingsRequest) ProtoMessage()               {}
func (*BiosSettingsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BiosSettingsRequest) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

func (m *BiosSettingsRequest) GetSystemID() string {
	if m != nil {
		return m.SystemID
	}
	return ""
}

func (m *BiosSettingsRequest) GetRequestBody() []byte {
	if m != nil {
		return m.RequestBody
	}
	return nil
}

type BootOrderSettingsRequest struct {
	SessionToken string `protobuf:"bytes,1,opt,name=SessionToken,json=sessionToken" json:"SessionToken,omitempty"`
	SystemID     string `protobuf:"bytes,2,opt,name=SystemID,json=systemID" json:"SystemID,omitempty"`
	RequestBody  []byte `protobuf:"bytes,3,opt,name=RequestBody,json=requestBody,proto3" json:"RequestBody,omitempty"`
}

func (m *BootOrderSettingsRequest) Reset()                    { *m = BootOrderSettingsRequest{} }
func (m *BootOrderSettingsRequest) String() string            { return proto.CompactTextString(m) }
func (*BootOrderSettingsRequest) ProtoMessage()               {}
func (*BootOrderSettingsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *BootOrderSettingsRequest) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

func (m *BootOrderSettingsRequest) GetSystemID() string {
	if m != nil {
		return m.SystemID
	}
	return ""
}

func (m *BootOrderSettingsRequest) GetRequestBody() []byte {
	if m != nil {
		return m.RequestBody
	}
	return nil
}

type VolumeRequest struct {
	SessionToken    string `protobuf:"bytes,1,opt,name=SessionToken,json=sessionToken" json:"SessionToken,omitempty"`
	SystemID        string `protobuf:"bytes,2,opt,name=SystemID,json=systemID" json:"SystemID,omitempty"`
	StorageInstance string `protobuf:"bytes,3,opt,name=StorageInstance,json=storageInstance" json:"StorageInstance,omitempty"`
	VolumeID        string `protobuf:"bytes,4,opt,name=VolumeID,json=volumeID" json:"VolumeID,omitempty"`
	RequestBody     []byte `protobuf:"bytes,5,opt,name=RequestBody,json=requestBody,proto3" json:"RequestBody,omitempty"`
}

func (m *VolumeRequest) Reset()                    { *m = VolumeRequest{} }
func (m *VolumeRequest) String() string            { return proto.CompactTextString(m) }
func (*VolumeRequest) ProtoMessage()               {}
func (*VolumeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *VolumeRequest) GetSessionToken() string {
	if m != nil {
		return m.SessionToken
	}
	return ""
}

func (m *VolumeRequest) GetSystemID() string {
	if m != nil {
		return m.SystemID
	}
	return ""
}

func (m *VolumeRequest) GetStorageInstance() string {
	if m != nil {
		return m.StorageInstance
	}
	return ""
}

func (m *VolumeRequest) GetVolumeID() string {
	if m != nil {
		return m.VolumeID
	}
	return ""
}

func (m *VolumeRequest) GetRequestBody() []byte {
	if m != nil {
		return m.RequestBody
	}
	return nil
}

func init() {
	proto.RegisterType((*GetSystemsRequest)(nil), "GetSystemsRequest")
	proto.RegisterType((*SystemsResponse)(nil), "SystemsResponse")
	proto.RegisterType((*ComputerSystemResetRequest)(nil), "ComputerSystemResetRequest")
	proto.RegisterType((*DefaultBootOrderRequest)(nil), "DefaultBootOrderRequest")
	proto.RegisterType((*BiosSettingsRequest)(nil), "BiosSettingsRequest")
	proto.RegisterType((*BootOrderSettingsRequest)(nil), "BootOrderSettingsRequest")
	proto.RegisterType((*VolumeRequest)(nil), "VolumeRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Systems service

type SystemsClient interface {
	GetSystemsCollection(ctx context.Context, in *GetSystemsRequest, opts ...grpc.CallOption) (*SystemsResponse, error)
	GetSystemResource(ctx context.Context, in *GetSystemsRequest, opts ...grpc.CallOption) (*SystemsResponse, error)
	GetSystems(ctx context.Context, in *GetSystemsRequest, opts ...grpc.CallOption) (*SystemsResponse, error)
	ComputerSystemReset(ctx context.Context, in *ComputerSystemResetRequest, opts ...grpc.CallOption) (*SystemsResponse, error)
	SetDefaultBootOrder(ctx context.Context, in *DefaultBootOrderRequest, opts ...grpc.CallOption) (*SystemsResponse, error)
	ChangeBiosSettings(ctx context.Context, in *BiosSettingsRequest, opts ...grpc.CallOption) (*SystemsResponse, error)
	ChangeBootOrderSettings(ctx context.Context, in *BootOrderSettingsRequest, opts ...grpc.CallOption) (*SystemsResponse, error)
	CreateVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*SystemsResponse, error)
	DeleteVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*SystemsResponse, error)
}

type systemsClient struct {
	cc *grpc.ClientConn
}

func NewSystemsClient(cc *grpc.ClientConn) SystemsClient {
	return &systemsClient{cc}
}

func (c *systemsClient) GetSystemsCollection(ctx context.Context, in *GetSystemsRequest, opts ...grpc.CallOption) (*SystemsResponse, error) {
	out := new(SystemsResponse)
	err := grpc.Invoke(ctx, "/Systems/GetSystemsCollection", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemsClient) GetSystemResource(ctx context.Context, in *GetSystemsRequest, opts ...grpc.CallOption) (*SystemsResponse, error) {
	out := new(SystemsResponse)
	err := grpc.Invoke(ctx, "/Systems/GetSystemResource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemsClient) GetSystems(ctx context.Context, in *GetSystemsRequest, opts ...grpc.CallOption) (*SystemsResponse, error) {
	out := new(SystemsResponse)
	err := grpc.Invoke(ctx, "/Systems/GetSystems", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemsClient) ComputerSystemReset(ctx context.Context, in *ComputerSystemResetRequest, opts ...grpc.CallOption) (*SystemsResponse, error) {
	out := new(SystemsResponse)
	err := grpc.Invoke(ctx, "/Systems/ComputerSystemReset", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemsClient) SetDefaultBootOrder(ctx context.Context, in *DefaultBootOrderRequest, opts ...grpc.CallOption) (*SystemsResponse, error) {
	out := new(SystemsResponse)
	err := grpc.Invoke(ctx, "/Systems/SetDefaultBootOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemsClient) ChangeBiosSettings(ctx context.Context, in *BiosSettingsRequest, opts ...grpc.CallOption) (*SystemsResponse, error) {
	out := new(SystemsResponse)
	err := grpc.Invoke(ctx, "/Systems/ChangeBiosSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemsClient) ChangeBootOrderSettings(ctx context.Context, in *BootOrderSettingsRequest, opts ...grpc.CallOption) (*SystemsResponse, error) {
	out := new(SystemsResponse)
	err := grpc.Invoke(ctx, "/Systems/ChangeBootOrderSettings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemsClient) CreateVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*SystemsResponse, error) {
	out := new(SystemsResponse)
	err := grpc.Invoke(ctx, "/Systems/CreateVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemsClient) DeleteVolume(ctx context.Context, in *VolumeRequest, opts ...grpc.CallOption) (*SystemsResponse, error) {
	out := new(SystemsResponse)
	err := grpc.Invoke(ctx, "/Systems/DeleteVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Systems service

type SystemsServer interface {
	GetSystemsCollection(context.Context, *GetSystemsRequest) (*SystemsResponse, error)
	GetSystemResource(context.Context, *GetSystemsRequest) (*SystemsResponse, error)
	GetSystems(context.Context, *GetSystemsRequest) (*SystemsResponse, error)
	ComputerSystemReset(context.Context, *ComputerSystemResetRequest) (*SystemsResponse, error)
	SetDefaultBootOrder(context.Context, *DefaultBootOrderRequest) (*SystemsResponse, error)
	ChangeBiosSettings(context.Context, *BiosSettingsRequest) (*SystemsResponse, error)
	ChangeBootOrderSettings(context.Context, *BootOrderSettingsRequest) (*SystemsResponse, error)
	CreateVolume(context.Context, *VolumeRequest) (*SystemsResponse, error)
	DeleteVolume(context.Context, *VolumeRequest) (*SystemsResponse, error)
}

func RegisterSystemsServer(s *grpc.Server, srv SystemsServer) {
	s.RegisterService(&_Systems_serviceDesc, srv)
}

func _Systems_GetSystemsCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemsServer).GetSystemsCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Systems/GetSystemsCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemsServer).GetSystemsCollection(ctx, req.(*GetSystemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systems_GetSystemResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemsServer).GetSystemResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Systems/GetSystemResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemsServer).GetSystemResource(ctx, req.(*GetSystemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systems_GetSystems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemsServer).GetSystems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Systems/GetSystems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemsServer).GetSystems(ctx, req.(*GetSystemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systems_ComputerSystemReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputerSystemResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemsServer).ComputerSystemReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Systems/ComputerSystemReset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemsServer).ComputerSystemReset(ctx, req.(*ComputerSystemResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systems_SetDefaultBootOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultBootOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemsServer).SetDefaultBootOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Systems/SetDefaultBootOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemsServer).SetDefaultBootOrder(ctx, req.(*DefaultBootOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systems_ChangeBiosSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BiosSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemsServer).ChangeBiosSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Systems/ChangeBiosSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemsServer).ChangeBiosSettings(ctx, req.(*BiosSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systems_ChangeBootOrderSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BootOrderSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemsServer).ChangeBootOrderSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Systems/ChangeBootOrderSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemsServer).ChangeBootOrderSettings(ctx, req.(*BootOrderSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systems_CreateVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemsServer).CreateVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Systems/CreateVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemsServer).CreateVolume(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Systems_DeleteVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemsServer).DeleteVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Systems/DeleteVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemsServer).DeleteVolume(ctx, req.(*VolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Systems_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Systems",
	HandlerType: (*SystemsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSystemsCollection",
			Handler:    _Systems_GetSystemsCollection_Handler,
		},
		{
			MethodName: "GetSystemResource",
			Handler:    _Systems_GetSystemResource_Handler,
		},
		{
			MethodName: "GetSystems",
			Handler:    _Systems_GetSystems_Handler,
		},
		{
			MethodName: "ComputerSystemReset",
			Handler:    _Systems_ComputerSystemReset_Handler,
		},
		{
			MethodName: "SetDefaultBootOrder",
			Handler:    _Systems_SetDefaultBootOrder_Handler,
		},
		{
			MethodName: "ChangeBiosSettings",
			Handler:    _Systems_ChangeBiosSettings_Handler,
		},
		{
			MethodName: "ChangeBootOrderSettings",
			Handler:    _Systems_ChangeBootOrderSettings_Handler,
		},
		{
			MethodName: "CreateVolume",
			Handler:    _Systems_CreateVolume_Handler,
		},
		{
			MethodName: "DeleteVolume",
			Handler:    _Systems_DeleteVolume_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "systems.proto",
}

func init() { proto.RegisterFile("systems.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 530 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x75, 0x53, 0xc2, 0x24, 0x21, 0x65, 0x12, 0xa9, 0x26, 0x20, 0x14, 0x59, 0x1c, 0x72,
	0xf2, 0x21, 0xf4, 0xc0, 0x8f, 0xd4, 0x43, 0x1c, 0xa0, 0x91, 0x8a, 0x40, 0x0e, 0x20, 0x71, 0xdc,
	0x26, 0x43, 0x1a, 0xd5, 0xf1, 0x86, 0x9d, 0x75, 0x51, 0x24, 0xc4, 0x1b, 0xf0, 0x3c, 0x1c, 0x78,
	0x15, 0x1e, 0x06, 0xd9, 0x5e, 0x12, 0x27, 0x75, 0xa4, 0x56, 0x2a, 0xdc, 0x3c, 0xdf, 0xce, 0x37,
	0xf3, 0xed, 0x6a, 0xbe, 0x31, 0xd4, 0x78, 0xc1, 0x9a, 0x66, 0xec, 0xcd, 0x95, 0xd4, 0xd2, 0xfd,
	0x61, 0xc1, 0xbd, 0xd7, 0xa4, 0x87, 0x19, 0x18, 0xd0, 0x97, 0x98, 0x58, 0xa3, 0x0b, 0x55, 0x26,
	0xe6, 0xa9, 0x8c, 0xde, 0xcb, 0x73, 0x8a, 0x1c, 0xab, 0x6d, 0x75, 0xee, 0x04, 0x6b, 0x58, 0x92,
	0xa3, 0xb2, 0xf4, 0x77, 0x42, 0x89, 0x99, 0xb3, 0x93, 0xe5, 0xe4, 0x31, 0xdc, 0x07, 0xfb, 0x43,
	0x70, 0xe2, 0xd8, 0xe9, 0x91, 0x1d, 0x07, 0x27, 0xf8, 0x08, 0x40, 0x11, 0xcb, 0x58, 0x8d, 0x68,
	0xd0, 0x77, 0x76, 0xd3, 0x83, 0x1c, 0xe2, 0xfe, 0xb6, 0xa0, 0xbe, 0x14, 0xc3, 0x73, 0x19, 0x31,
	0x25, 0x1c, 0xd6, 0x42, 0xc7, 0xec, 0xcb, 0x31, 0xa5, 0x5a, 0x4a, 0x41, 0x0e, 0xc1, 0xc7, 0x50,
	0xcb, 0xa2, 0x37, 0xc4, 0x2c, 0x26, 0x64, 0xa4, 0xac, 0x83, 0x78, 0x08, 0x7b, 0x67, 0x24, 0xc6,
	0xa4, 0x1c, 0xbb, 0x6d, 0x77, 0x2a, 0xdd, 0x87, 0xde, 0x46, 0x1f, 0xef, 0x38, 0x3d, 0x7e, 0x19,
	0x69, 0xb5, 0x08, 0x4c, 0x2e, 0x22, 0xec, 0x9e, 0xca, 0xf1, 0x22, 0x55, 0x5a, 0x0d, 0xd2, 0xef,
	0xd6, 0x33, 0xa8, 0xe4, 0x52, 0x93, 0x4b, 0x9e, 0xd3, 0xc2, 0xbc, 0x51, 0xf2, 0x89, 0x4d, 0x28,
	0x5d, 0x88, 0x30, 0xfe, 0x2b, 0x24, 0x0b, 0x9e, 0xef, 0x3c, 0xb5, 0xdc, 0xef, 0xd0, 0xf2, 0xe5,
	0x6c, 0x1e, 0x6b, 0x52, 0x59, 0xf7, 0x80, 0x98, 0xf4, 0x75, 0x9e, 0xbd, 0x05, 0xe5, 0x8c, 0x39,
	0xe8, 0x9b, 0xf2, 0x65, 0x36, 0x31, 0xb6, 0xa1, 0x62, 0x4a, 0xf5, 0x12, 0xcd, 0x76, 0xaa, 0xb9,
	0xa2, 0x56, 0x90, 0xfb, 0x09, 0x0e, 0xfa, 0xf4, 0x59, 0xc4, 0xa1, 0xee, 0x49, 0xa9, 0xdf, 0xaa,
	0x31, 0xa9, 0x1b, 0x6a, 0xee, 0x7e, 0x85, 0x46, 0x6f, 0x2a, 0x79, 0x48, 0x5a, 0x4f, 0xa3, 0x49,
	0x7e, 0x94, 0x86, 0xff, 0xf6, 0x4e, 0xdf, 0xc0, 0x59, 0x5e, 0xe6, 0xff, 0x77, 0xff, 0x69, 0x41,
	0xed, 0xa3, 0x0c, 0xe3, 0x19, 0xdd, 0x54, 0xcf, 0x0e, 0xd4, 0x87, 0x5a, 0x2a, 0x31, 0xa1, 0x41,
	0xc4, 0x5a, 0x44, 0x23, 0x32, 0x06, 0xaa, 0xf3, 0x3a, 0x9c, 0x54, 0xc9, 0x5a, 0x2f, 0xad, 0x54,
	0xbe, 0x30, 0xf1, 0xa6, 0xf2, 0xd2, 0x25, 0xe5, 0xdd, 0x5f, 0xbb, 0x70, 0xdb, 0x58, 0x00, 0x8f,
	0xa0, 0xb9, 0xda, 0x02, 0xbe, 0x0c, 0x43, 0x1a, 0xe9, 0xa9, 0x8c, 0x10, 0xbd, 0x4b, 0xcb, 0xa1,
	0xb5, 0xbf, 0x69, 0x1c, 0xf7, 0x16, 0xbe, 0xc8, 0x6d, 0x91, 0xc0, 0xb8, 0xf9, 0xca, 0xe4, 0x43,
	0x80, 0x55, 0xe2, 0x95, 0x59, 0xaf, 0xa0, 0x51, 0x60, 0x25, 0x7c, 0xe0, 0x6d, 0x37, 0x58, 0x61,
	0x1d, 0x1f, 0x1a, 0x43, 0xd2, 0x9b, 0xae, 0x40, 0xc7, 0xdb, 0x62, 0x94, 0xc2, 0x22, 0x47, 0x80,
	0xfe, 0x99, 0x88, 0x26, 0x94, 0xb7, 0x00, 0x36, 0xbd, 0x02, 0x47, 0x14, 0xf2, 0x8f, 0xe1, 0xc0,
	0xf0, 0x37, 0x27, 0x19, 0xef, 0x7b, 0xdb, 0xa6, 0xbb, 0xb0, 0x52, 0x17, 0xaa, 0xbe, 0x22, 0xa1,
	0x29, 0x9b, 0x0c, 0xbc, 0xeb, 0xad, 0x4d, 0xe7, 0x36, 0x4e, 0x9f, 0x42, 0xba, 0x0e, 0xe7, 0x74,
	0x2f, 0xfd, 0x7f, 0x3c, 0xf9, 0x13, 0x00, 0x00, 0xff, 0xff, 0x2e, 0x6a, 0x42, 0xaa, 0x50, 0x06,
	0x00, 0x00,
}
